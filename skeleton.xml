<?xml version="1.0" encoding="UTF-8"?>
<skeleton date="2021-07-07T16:30:24.037574500Z"
          schema="xsd/skeleton.xsd"
          version="1.0-SNAPSHOT">
   <app id="D:\Projects\HuaweiLab\jpeek\..\json\java\target\classes">
      <package id="com.jsoniter.fuzzy">
         <class id="StringDoubleDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.StringDoubleDecoder; file: com.jsoniter.fuzzy.StringDoubleDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$DoubleDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)D"
                       name="decodeDouble"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readDouble</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MaybeStringIntDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.MaybeStringIntDecoder; file: com.jsoniter.fuzzy.MaybeStringIntDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$IntDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="decodeInt"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.unreadByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readInt</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readInt</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StringIntDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.StringIntDecoder; file: com.jsoniter.fuzzy.StringIntDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$IntDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="decodeInt"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readInt</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StringLongDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.StringLongDecoder; file: com.jsoniter.fuzzy.StringLongDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$LongDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)J"
                       name="decodeLong"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readLong</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MaybeStringShortDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.MaybeStringShortDecoder; file: com.jsoniter.fuzzy.MaybeStringShortDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$ShortDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)S"
                       name="decodeShort"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>S</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.unreadByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readShort</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readShort</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StringShortDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.StringShortDecoder; file: com.jsoniter.fuzzy.StringShortDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$ShortDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)S"
                       name="decodeShort"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>S</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readShort</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MaybeStringLongDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.MaybeStringLongDecoder; file: com.jsoniter.fuzzy.MaybeStringLongDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$LongDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)J"
                       name="decodeLong"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.unreadByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readLong</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readLong</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MaybeEmptyArrayDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.MaybeEmptyArrayDecoder; file: com.jsoniter.fuzzy.MaybeEmptyArrayDecoder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Binding">binding</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/spi/Binding;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">binding</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.whatIsNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.ARRAY</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">binding</op>
                     <op code="get">valueTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MaybeStringFloatDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.MaybeStringFloatDecoder; file: com.jsoniter.fuzzy.MaybeStringFloatDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$FloatDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)F"
                       name="decodeFloat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.unreadByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readFloat</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readFloat</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StringFloatDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.StringFloatDecoder; file: com.jsoniter.fuzzy.StringFloatDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$FloatDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)F"
                       name="decodeFloat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readFloat</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MaybeStringDoubleDecoder"><!--Package: com.jsoniter.fuzzy; name: com.jsoniter.fuzzy.MaybeStringDoubleDecoder; file: com.jsoniter.fuzzy.MaybeStringDoubleDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$DoubleDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)D"
                       name="decodeDouble"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.unreadByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readDouble</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readDouble</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.jsoniter.static_codegen">
         <class id="StaticCodegen"><!--Package: com.jsoniter.static_codegen; name: com.jsoniter.static_codegen.StaticCodegen; file: com.jsoniter.static_codegen.StaticCodegen-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/String;)V"
                       name="main"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="CC">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.File.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.File.exists</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.File.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.File.getAbsolutePath</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.forName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.newInstance</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.DecodingMode.DYNAMIC_MODE_AND_MATCH_FIELD_WITH_HASH</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.setMode</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/DecodingMode">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.EncodingMode.DYNAMIC_MODE</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.setMode</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/EncodingMode">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.static_codegen.StaticCodegenConfig.setup</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.static_codegen.StaticCodegenConfig.whatToCodegen</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess$StaticCodegenTarget.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.staticGenDecoders</name>
                        <args>
                           <arg type="[Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Lcom/jsoniter/CodegenAccess$StaticCodegenTarget">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.static_codegen.StaticCodegenConfig.whatToCodegen</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenAccess$StaticCodegenTarget.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenAccess.staticGenEncoders</name>
                        <args>
                           <arg type="[Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Lcom/jsoniter/output/CodegenAccess$StaticCodegenTarget">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.jsoniter.extra">
         <class id="JacksonCompatibilityMode$Builder"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.JacksonCompatibilityMode$Builder; file: com.jsoniter.extra.JacksonCompatibilityMode$Builder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/extra/JacksonCompatibilityMode;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/extra/JacksonCompatibilityMode</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.build</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/spi/Config;"
                       name="doBuild"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Config</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/extra/JacksonCompatibilityMode$Builder">?</arg>
                           <arg type="Lcom/jsoniter/extra/JacksonCompatibilityMode$1">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Base64Support"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.Base64Support; file: com.jsoniter.extra.Base64Support-->
            <attributes>
               <attribute final="false" public="false" static="true" type="Z">enabled</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enable"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.Base64Support.enabled</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.Base64Support.enabled</op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64Support$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64Support$2.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JdkDatetimeSupport"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.JdkDatetimeSupport; file: com.jsoniter.extra.JdkDatetimeSupport-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">pattern</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/ThreadLocal">sdf</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="enable"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.JdkDatetimeSupport.pattern</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.JdkDatetimeSupport.pattern</op>
                     <op code="call">
                        <name>com.jsoniter.extra.JdkDatetimeSupport$2.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JdkDatetimeSupport$3.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.JdkDatetimeSupport$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.JdkDatetimeSupport.sdf</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NamingStrategySupport"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.NamingStrategySupport; file: com.jsoniter.extra.NamingStrategySupport-->
            <attributes>
               <attribute final="false" public="false" static="true" type="Z">enabled</attribute>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lcom/jsoniter/extra/NamingStrategySupport$NamingStrategy">SNAKE_CASE</attribute>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lcom/jsoniter/extra/NamingStrategySupport$NamingStrategy">UPPER_CAMEL_CASE</attribute>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lcom/jsoniter/extra/NamingStrategySupport$NamingStrategy">LOWER_CASE</attribute>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lcom/jsoniter/extra/NamingStrategySupport$NamingStrategy">KEBAB_CASE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/extra/NamingStrategySupport$NamingStrategy;)V"
                       name="enable"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/extra/NamingStrategySupport$NamingStrategy">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.NamingStrategySupport.enabled</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.NamingStrategySupport.enabled</op>
                     <op code="call">
                        <name>com.jsoniter.extra.NamingStrategySupport$1.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/NamingStrategySupport$NamingStrategy">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerExtension</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Extension">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.NamingStrategySupport$2.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.NamingStrategySupport.SNAKE_CASE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.NamingStrategySupport$3.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.NamingStrategySupport.UPPER_CAMEL_CASE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.NamingStrategySupport$4.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.NamingStrategySupport.LOWER_CASE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.NamingStrategySupport$5.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.NamingStrategySupport.KEBAB_CASE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Base64FloatSupport"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.Base64FloatSupport; file: com.jsoniter.extra.Base64FloatSupport-->
            <attributes>
               <attribute final="true" public="false" static="true" type="[I">DIGITS</attribute>
               <attribute final="true" public="false" static="true" type="[I">HEX</attribute>
               <attribute final="true" public="false" static="true" type="[I">DEC</attribute>
               <attribute final="false" public="false" static="true" type="Z">enabled</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enableEncodersAndDecoders"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.enabled</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.Base64FloatSupport.enabled</op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport.enableDecoders</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Double.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport$2.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport$3.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Float.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport$4.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enableDecoders"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport$5.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Double.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport$6.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport$7.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Float.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.Base64FloatSupport$8.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)J"
                       name="readLongBits"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readStringAsSlice</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.data</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.head</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.tail</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(JLcom/jsoniter/output/JsonStream;)V"
                       name="writeLongBits"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="J">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="put_static">com.jsoniter.extra.Base64FloatSupport.HEX</op>
                     <op code="put_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DIGITS</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.HEX</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.HEX</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                     <op code="get_static">com.jsoniter.extra.Base64FloatSupport.DEC</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreciseFloatSupport"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.PreciseFloatSupport; file: com.jsoniter.extra.PreciseFloatSupport-->
            <attributes>
               <attribute final="false" public="false" static="true" type="Z">enabled</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enable"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.PreciseFloatSupport.enabled</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.PreciseFloatSupport.enabled</op>
                     <op code="call">
                        <name>com.jsoniter.extra.PreciseFloatSupport$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Double.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.PreciseFloatSupport$2.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.PreciseFloatSupport$3.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Float.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.PreciseFloatSupport$4.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JacksonCompatibilityMode"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.JacksonCompatibilityMode; file: com.jsoniter.extra.JacksonCompatibilityMode-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Lcom/jsoniter/extra/JacksonCompatibilityMode$Builder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/extra/JacksonCompatibilityMode$Builder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonIgnore;"
                       name="getJsonIgnore"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonIgnore</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonIgnore</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode$1.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/JacksonCompatibilityMode">?</arg>
                           <arg type="Lcom/fasterxml/jackson/annotation/JsonIgnore">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonProperty;"
                       name="getJsonProperty"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonProperty</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonProperty</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode$2.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/JacksonCompatibilityMode">?</arg>
                           <arg type="Lcom/fasterxml/jackson/annotation/JsonProperty">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonCreator;"
                       name="getJsonCreator"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonCreator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonCreator</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode$3.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/JacksonCompatibilityMode">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonUnwrapper;"
                       name="getJsonUnwrapper"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonUnwrapper</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonUnwrapper</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode$4.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/JacksonCompatibilityMode">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonWrapper;"
                       name="getJsonWrapper"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonWrapper</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonWrapper</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.JacksonCompatibilityMode$5.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/JacksonCompatibilityMode">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GsonCompatibilityMode$Builder"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.GsonCompatibilityMode$Builder; file: com.jsoniter.extra.GsonCompatibilityMode$Builder-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">excludeFieldsWithoutExposeAnnotation</attribute>
               <attribute final="false" public="false" static="false" type="Z">disableHtmlEscaping</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/ThreadLocal">dateFormat</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lcom/google/gson/FieldNamingStrategy">fieldNamingStrategy</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Double">version</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">serializationExclusionStrategies</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">deserializationExclusionStrategies</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">excludeFieldsWithoutExposeAnnotation</op>
                     <op code="put">disableHtmlEscaping</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder$1.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="put">dateFormat</op>
                     <op code="call">
                        <name>java.util.HashSet.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">serializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.HashSet.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">deserializationExclusionStrategies</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.omitDefaultValue</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="excludeFieldsWithoutExposeAnnotation"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="put">excludeFieldsWithoutExposeAnnotation</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="serializeNulls"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.omitDefaultValue</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="setDateFormat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(II)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="setDateFormat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder$2.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">dateFormat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="setDateFormat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder$3.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">dateFormat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/google/gson/FieldNamingStrategy;)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="setFieldNamingStrategy"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/google/gson/FieldNamingStrategy">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="put">fieldNamingStrategy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/google/gson/FieldNamingPolicy;)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="setFieldNamingPolicy"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/google/gson/FieldNamingPolicy">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="put">fieldNamingStrategy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="setPrettyPrinting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.indentionStep</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="disableHtmlEscaping"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="put">disableHtmlEscaping</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="setVersion"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                     <op code="put">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lcom/google/gson/ExclusionStrategy;)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="setExclusionStrategies"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/google/gson/ExclusionStrategy">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.addSerializationExclusionStrategy</name>
                        <args>
                           <arg type="Lcom/google/gson/ExclusionStrategy">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/google/gson/ExclusionStrategy;)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="addSerializationExclusionStrategy"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/google/gson/ExclusionStrategy">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.Set.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/google/gson/ExclusionStrategy;)Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="addDeserializationExclusionStrategy"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/google/gson/ExclusionStrategy">?</arg>
                  </args>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="get">deserializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.Set.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/extra/GsonCompatibilityMode;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.escapeUnicode</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.build</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/spi/Config;"
                       name="doBuild"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Config</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$1">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">excludeFieldsWithoutExposeAnnotation</op>
                     <op code="get">excludeFieldsWithoutExposeAnnotation</op>
                     <op code="get">disableHtmlEscaping</op>
                     <op code="get">disableHtmlEscaping</op>
                     <op code="get">dateFormat</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">dateFormat</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.text.DateFormat.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">fieldNamingStrategy</op>
                     <op code="get">fieldNamingStrategy</op>
                     <op code="get">fieldNamingStrategy</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">fieldNamingStrategy</op>
                     <op code="get">version</op>
                     <op code="get">version</op>
                     <op code="get">version</op>
                     <op code="call">
                        <name>java.lang.Double.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">version</op>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.Set.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="get">deserializationExclusionStrategies</op>
                     <op code="get">deserializationExclusionStrategies</op>
                     <op code="get">deserializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.Set.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">deserializationExclusionStrategies</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">excludeFieldsWithoutExposeAnnotation</op>
                     <op code="get">disableHtmlEscaping</op>
                     <op code="get">dateFormat</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.text.DateFormat.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fieldNamingStrategy</op>
                     <op code="get">fieldNamingStrategy</op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">version</op>
                     <op code="get">version</op>
                     <op code="call">
                        <name>java.lang.Double.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.Set.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">deserializationExclusionStrategies</op>
                     <op code="get">deserializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.Set.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config$Builder;"
                       name="copy"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.copy</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">excludeFieldsWithoutExposeAnnotation</op>
                     <op code="put">excludeFieldsWithoutExposeAnnotation</op>
                     <op code="get">disableHtmlEscaping</op>
                     <op code="put">disableHtmlEscaping</op>
                     <op code="get">dateFormat</op>
                     <op code="put">dateFormat</op>
                     <op code="get">fieldNamingStrategy</op>
                     <op code="put">fieldNamingStrategy</op>
                     <op code="get">version</op>
                     <op code="put">version</op>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.HashSet.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="put">serializationExclusionStrategies</op>
                     <op code="get">deserializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.util.HashSet.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="put">deserializationExclusionStrategies</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">excludeFieldsWithoutExposeAnnotation</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">disableHtmlEscaping</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">dateFormat</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">fieldNamingStrategy</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">version</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">serializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">deserializationExclusionStrategies</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GsonCompatibilityMode"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.GsonCompatibilityMode; file: com.jsoniter.extra.GsonCompatibilityMode-->
            <attributes>
               <attribute final="true" public="false" static="true" type="I">SURR1_FIRST</attribute>
               <attribute final="true" public="false" static="true" type="I">SURR1_LAST</attribute>
               <attribute final="true" public="false" static="true" type="I">SURR2_FIRST</attribute>
               <attribute final="true" public="false" static="true" type="I">SURR2_LAST</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="[Ljava/lang/String">REPLACEMENT_CHARS</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="[Ljava/lang/String">HTML_SAFE_REPLACEMENT_CHARS</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/extra/GsonCompatibilityMode$Builder;"
                       name="builder"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lcom/jsoniter/extra/GsonCompatibilityMode$Builder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/OmitValue;"
                       name="createOmitValue"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/OmitValue</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Class.isPrimitive</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.createOmitValue</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Encoder;"
                       name="createEncoder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$1.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.HTML_SAFE_REPLACEMENT_CHARS</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$2.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                           <arg type="[Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.createEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Decoder;"
                       name="createDecoder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$3.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$4.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Boolean.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$5.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Long.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$6.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Integer.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$7.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Float.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$8.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Double.TYPE</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$9.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.createDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="updateClassDescriptor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.allBindings</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="put">toNames</op>
                     <op code="put">fromNames</op>
                     <op code="get">field</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>com.google.gson.FieldNamingStrategy.translateName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Field">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.getAnnotation</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.google.gson.annotations.Since.value</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.getAnnotation</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.google.gson.annotations.Until.value</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.access$500</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.google.gson.ExclusionStrategy.shouldSkipClass</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>com.google.gson.FieldAttributes.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Field">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.google.gson.ExclusionStrategy.shouldSkipField</name>
                        <args>
                           <arg type="Lcom/google/gson/FieldAttributes">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.access$600</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.google.gson.ExclusionStrategy.shouldSkipClass</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>com.google.gson.FieldAttributes.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Field">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.google.gson.ExclusionStrategy.shouldSkipField</name>
                        <args>
                           <arg type="Lcom/google/gson/FieldAttributes">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.updateClassDescriptor</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonProperty;"
                       name="getJsonProperty"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonProperty</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonProperty</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$10.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                           <arg type="Lcom/google/gson/annotations/SerializedName">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonIgnore;"
                       name="getJsonIgnore"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonIgnore</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonIgnore</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.builder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$Builder.access$700</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode$Builder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$11.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                           <arg type="Lcom/google/gson/annotations/Expose">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.extra.GsonCompatibilityMode$12.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/extra/GsonCompatibilityMode">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.REPLACEMENT_CHARS</op>
                     <op code="call">
                        <name>[Ljava.lang.String;.clone</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.GsonCompatibilityMode.HTML_SAFE_REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.HTML_SAFE_REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.HTML_SAFE_REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.HTML_SAFE_REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.HTML_SAFE_REPLACEMENT_CHARS</op>
                     <op code="get_static">com.jsoniter.extra.GsonCompatibilityMode.HTML_SAFE_REPLACEMENT_CHARS</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Base64"><!--Package: com.jsoniter.extra; name: com.jsoniter.extra.Base64; file: com.jsoniter.extra.Base64-->
            <attributes>
               <attribute final="true" public="false" static="true" type="[C">CA</attribute>
               <attribute final="true" public="false" static="true" type="[B">BA</attribute>
               <attribute final="true" public="false" static="true" type="[I">IA</attribute>
               <attribute final="true" public="false" static="true" type="[B">EMPTY_ARRAY</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([B[CI)I"
                       name="encodeToChar"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="C">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BLcom/jsoniter/output/JsonStream;)I"
                       name="encodeToBytes"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(JLcom/jsoniter/output/JsonStream;)V"
                       name="encodeLongBits"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="J">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)J"
                       name="decodeLongBits"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readStringAsSlice</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.len</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.data</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.head</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BI)I"
                       name="findEnd"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)[B"
                       name="decodeFast"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="get_static">com.jsoniter.extra.Base64.EMPTY_ARRAY</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.toCharArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="put_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="call">
                        <name>java.util.Arrays.fill</name>
                        <args>
                           <arg type="[II">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.IA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="put_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.BA</op>
                     <op code="get_static">com.jsoniter.extra.Base64.CA</op>
                     <op code="put_static">com.jsoniter.extra.Base64.EMPTY_ARRAY</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.jsoniter.output">
         <class id="CodegenAccess"><!--Package: com.jsoniter.output; name: com.jsoniter.output.CodegenAccess; file: com.jsoniter.output.CodegenAccess-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;ZLcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$BooleanEncoder.encodeBoolean</name>
                        <args>
                           <arg type="ZLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;BLcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="B">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$ShortEncoder.encodeShort</name>
                        <args>
                           <arg type="SLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;SLcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="S">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$ShortEncoder.encodeShort</name>
                        <args>
                           <arg type="SLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;ILcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="I">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$IntEncoder.encodeInt</name>
                        <args>
                           <arg type="ILcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;CLcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="C">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$IntEncoder.encodeInt</name>
                        <args>
                           <arg type="ILcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;JLcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="J">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$LongEncoder.encodeLong</name>
                        <args>
                           <arg type="JLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;FLcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="F">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$FloatEncoder.encodeFloat</name>
                        <args>
                           <arg type="FLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;DLcom/jsoniter/output/JsonStream;)V"
                       name="writeVal"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="D">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$DoubleEncoder.encodeDouble</name>
                        <args>
                           <arg type="DLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="writeMapKey"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getMapKeyEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/output/JsonStream;)V"
                       name="writeStringWithoutQuote"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeStringWithoutQuote</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lcom/jsoniter/spi/TypeLiteral;Lcom/jsoniter/output/CodegenAccess$StaticCodegenTarget;)V"
                       name="staticGenEncoders"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Lcom/jsoniter/output/CodegenAccess$StaticCodegenTarget">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.staticGenEncoders</name>
                        <args>
                           <arg type="[Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Lcom/jsoniter/output/CodegenAccess$StaticCodegenTarget">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrapNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.getReflectionEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$ReflectionEncoder.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionArrayEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.ReflectionArrayEncoder; file: com.jsoniter.output.ReflectionArrayEncoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/TypeLiteral">compTypeLiteral</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;[Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getComponentType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">compTypeLiteral</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.getLength</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeEmptyArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayStart</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeLiteral</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeLiteral</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayEnd</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrapArray</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapKeyEncoders$NumberKeyEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.MapKeyEncoders$NumberKeyEncoder; file: com.jsoniter.output.MapKeyEncoders$NumberKeyEncoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Encoder">encoder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/spi/Encoder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">encoder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">encoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapKeyEncoders$StringKeyEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.MapKeyEncoders$StringKeyEncoder; file: com.jsoniter.output.MapKeyEncoders$StringKeyEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StreamImplNumber"><!--Package: com.jsoniter.output; name: com.jsoniter.output.StreamImplNumber; file: com.jsoniter.output.StreamImplNumber-->
            <attributes>
               <attribute final="true" public="false" static="true" type="[I">DIGITS</attribute>
               <attribute final="true" public="false" static="true" type="[B">MIN_INT</attribute>
               <attribute final="true" public="false" static="true" type="[B">MIN_LONG</attribute>
               <attribute final="true" public="false" static="true" type="[I">POW10</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;I)V"
                       name="writeInt"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.MIN_INT</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.MIN_INT</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.MIN_INT</op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)I"
                       name="writeFirstBuf"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)V"
                       name="writeBuf"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;J)V"
                       name="writeLong"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="J">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.MIN_LONG</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.MIN_LONG</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.MIN_LONG</op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeBuf</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;F)V"
                       name="writeFloat"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="F">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Float.toString</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeRaw</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.POW10</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;D)V"
                       name="writeDouble"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.toString</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeRaw</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.POW10</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="get_static">com.jsoniter.output.StreamImplNumber.DIGITS</op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.StreamImplNumber.MIN_INT</op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.StreamImplNumber.MIN_LONG</op>
                     <op code="put_static">com.jsoniter.output.StreamImplNumber.POW10</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionMapEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.ReflectionMapEncoder; file: com.jsoniter.output.ReflectionMapEncoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/TypeLiteral">valueTypeLiteral</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Encoder">mapKeyEncoder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;[Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders.registerOrGetExisting</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">mapKeyEncoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">valueTypeLiteral</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectStart</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionMapEncoder.writeEntry</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="ZLjava/util/Map$Entry">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionMapEncoder.writeEntry</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="ZLjava/util/Map$Entry">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectEnd</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;ZLjava/util/Map$Entry;)Z"
                       name="writeEntry"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Ljava/util/Map$Entry">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">mapKeyEncoder</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectField</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get">valueTypeLiteral</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionObjectEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.ReflectionObjectEncoder; file: com.jsoniter.output.ReflectionObjectEncoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/ClassDescriptor">desc</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/List">fields</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/List">getters</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">fields</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">getters</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getEncodingClassDescriptor</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="put">desc</op>
                     <op code="get">desc</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.encodeTos</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">binding</op>
                     <op code="get">encoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.encoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">encoder</op>
                     <op code="get">field</op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">getters</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionObjectEncoder.enocde_</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">binding</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">toName</op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">getters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">binding</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">toName</op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="enocde_"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectStart</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">binding</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionObjectEncoder.writeEncodeTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="ZLcom/jsoniter/spi/EncodeTo">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">getters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">binding</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionObjectEncoder.writeEncodeTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="ZLcom/jsoniter/spi/EncodeTo">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">unwrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">isMap</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectField</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">mapValueTypeLiteral</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectEnd</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;ZLcom/jsoniter/spi/EncodeTo;Ljava/lang/Object;)Z"
                       name="writeEncodeTo"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Lcom/jsoniter/spi/EncodeTo">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">binding</op>
                     <op code="get">defaultValueToOmit</op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue.shouldOmit</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">toName</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectField</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">binding</op>
                     <op code="get">encoder</op>
                     <op code="get">binding</op>
                     <op code="get">encoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StreamImplString"><!--Package: com.jsoniter.output; name: com.jsoniter.output.StreamImplString; file: com.jsoniter.output.StreamImplString-->
            <attributes>
               <attribute final="true" public="false" static="true" type="[B">ITOA</attribute>
               <attribute final="true" public="false" static="true" type="[Z">CAN_DIRECT_WRITE</attribute>
               <attribute final="true" public="false" static="true" type="I">SURR1_FIRST</attribute>
               <attribute final="true" public="false" static="true" type="I">SURR1_LAST</attribute>
               <attribute final="true" public="false" static="true" type="I">SURR2_FIRST</attribute>
               <attribute final="true" public="false" static="true" type="I">SURR2_LAST</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;Ljava/lang/String;)V"
                       name="writeString"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.StreamImplString.CAN_DIRECT_WRITE</op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="put">count</op>
                     <op code="put">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeStringSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;Ljava/lang/String;)V"
                       name="writeStringWithoutQuote"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="put">count</op>
                     <op code="put">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeStringSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;Ljava/lang/String;II)V"
                       name="writeStringSlowPath"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.escapeUnicode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeAsSlashU</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeAsciiChar</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeStringSlowPathWithoutEscapeUnicode</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;Ljava/lang/String;II)V"
                       name="writeStringSlowPathWithoutEscapeUnicode"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.toHexString</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.toHexString</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeAsciiChar</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;I)V"
                       name="writeAsciiChar"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeAsSlashU</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;I)V"
                       name="writeAsSlashU"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.output.StreamImplString.ITOA</op>
                     <op code="get_static">com.jsoniter.output.StreamImplString.ITOA</op>
                     <op code="get_static">com.jsoniter.output.StreamImplString.ITOA</op>
                     <op code="get_static">com.jsoniter.output.StreamImplString.ITOA</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBBB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.output.StreamImplString.ITOA</op>
                     <op code="put_static">com.jsoniter.output.StreamImplString.CAN_DIRECT_WRITE</op>
                     <op code="get_static">com.jsoniter.output.StreamImplString.CAN_DIRECT_WRITE</op>
                     <op code="get_static">com.jsoniter.output.StreamImplString.CAN_DIRECT_WRITE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionEnumEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.ReflectionEnumEncoder; file: com.jsoniter.output.ReflectionEnumEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeRaw</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionListEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.ReflectionListEncoder; file: com.jsoniter.output.ReflectionListEncoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/TypeLiteral">compTypeLiteral</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;[Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">compTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">compTypeLiteral</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeEmptyArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayStart</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeLiteral</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeLiteral</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayEnd</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionEncoderFactory"><!--Package: com.jsoniter.output; name: com.jsoniter.output.ReflectionEncoderFactory; file: com.jsoniter.output.ReflectionEncoderFactory-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)Lcom/jsoniter/spi/Encoder$ReflectionEncoder;"
                       name="create"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder$ReflectionEncoder</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionArrayEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionListEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionCollectionEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionMapEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isEnum</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionEnumEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionObjectEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenAccess$StaticCodegenTarget"><!--Package: com.jsoniter.output; name: com.jsoniter.output.CodegenAccess$StaticCodegenTarget; file: com.jsoniter.output.CodegenAccess$StaticCodegenTarget-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">outputDir</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">outputDir</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplObject"><!--Package: com.jsoniter.output; name: com.jsoniter.output.CodegenImplObject; file: com.jsoniter.output.CodegenImplObject-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)Lcom/jsoniter/output/CodegenResult;"
                       name="genObject"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getEncodingClassDescriptor</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.encodeTos</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplObject.hasFieldOutput</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">binding</op>
                     <op code="get">toName</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplObject.genField</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">unwrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">isMap</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplObject.appendComma</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">mapValueTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplObject.appendComma</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)Z"
                       name="hasFieldOutput"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">unwrappers</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.encodeTos</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/CodegenResult;Lcom/jsoniter/spi/Binding;Ljava/lang/String;I)I"
                       name="genField"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.encoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">isCollectionValueNullable</op>
                     <op code="get">field</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getReturnType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplObject.supportCollectionValueNullable</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isPrimitive</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.omitDefaultValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">isNullable</op>
                     <op code="get">defaultValueToOmit</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">defaultValueToOmit</op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue.code</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplObject.appendComma</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.bufferToWriteOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplObject.appendComma</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="ZZ">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/CodegenResult;I)I"
                       name="appendComma"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Z"
                       name="supportCollectionValueNullable"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionCollectionEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.ReflectionCollectionEncoder; file: com.jsoniter.output.ReflectionCollectionEncoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/TypeLiteral">compTypeLiteral</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;[Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">compTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">compTypeLiteral</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Collection.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeEmptyArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayStart</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeLiteral</op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeLiteral</op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayEnd</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplMap"><!--Package: com.jsoniter.output; name: com.jsoniter.output.CodegenImplMap; file: com.jsoniter.output.CodegenImplMap-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/ClassInfo;)Lcom/jsoniter/output/CodegenResult;"
                       name="genMap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>java.lang.String.endsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplMap.genWriteMapKey</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplMap.genWriteMapKey</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/CodegenResult;Ljava/lang/reflect/Type;Z)V"
                       name="genWriteMapKey"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.CodegenImplNative.NATIVE_ENCODERS</op>
                     <op code="call">
                        <name>java.util.Map.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getMapKeyEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplArray"><!--Package: com.jsoniter.output; name: com.jsoniter.output.CodegenImplArray; file: com.jsoniter.output.CodegenImplArray-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/ClassInfo;)Lcom/jsoniter/output/CodegenResult;"
                       name="genCollection"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="get">typeArgs</op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.IllegalArgumentException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplArray.genList</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplArray.genCollection</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/ClassInfo;)Lcom/jsoniter/output/CodegenResult;"
                       name="genArray"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getComponentType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.IllegalArgumentException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.endsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isPrimitive</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/reflect/Type;)Lcom/jsoniter/output/CodegenResult;"
                       name="genList"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.endsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/reflect/Type;)Lcom/jsoniter/output/CodegenResult;"
                       name="genCollection"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.endsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplNative"><!--Package: com.jsoniter.output; name: com.jsoniter.output.CodegenImplNative; file: com.jsoniter.output.CodegenImplNative-->
            <attributes>
               <attribute final="true" public="true" static="true" type="Ljava/util/Map">NATIVE_ENCODERS</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/CodegenResult;Ljava/lang/String;Ljava/lang/reflect/Type;Z)V"
                       name="genWriteOp"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genWriteOp</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="ZZ">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/CodegenResult;Ljava/lang/String;Ljava/lang/reflect/Type;ZZ)V"
                       name="genWriteOp"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.CodegenImplNative.NATIVE_ENCODERS</op>
                     <op code="call">
                        <name>java.util.Map.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.getGeneratedSource</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.appendBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">prelude</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.bufferToWriteOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">epilogue</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.bufferToWriteOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">prelude</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">epilogue</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="getTypeName"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Lcom/jsoniter/output/CodegenResult;"
                       name="genEnum"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.buffer</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.CodegenImplNative.NATIVE_ENCODERS</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Codegen"><!--Package: com.jsoniter.output; name: com.jsoniter.output.Codegen; file: com.jsoniter.output.Codegen-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Lcom/jsoniter/output/CodegenAccess$StaticCodegenTarget">isDoingStaticCodegen</attribute>
               <attribute final="true" public="false" static="true" type="Ljava/util/Map">generatedSources</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">reflectionEncoders</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Encoder$ReflectionEncoder;"
                       name="getReflectionEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder$ReflectionEncoder</return>
                  <ops>
                     <op code="get_static">com.jsoniter.output.CodegenImplNative.NATIVE_ENCODERS</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.Codegen.reflectionEncoders</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.Codegen.reflectionEncoders</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassInfo.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionEncoderFactory.create</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.Codegen.reflectionEncoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.Codegen.reflectionEncoders</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Encoder;"
                       name="getEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.gen</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Encoder;"
                       name="gen"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getExtensions</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Extension.createEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.CodegenImplNative.NATIVE_ENCODERS</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.addPlaceholderEncoderToSupportRecursiveStructure</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.encodingMode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.EncodingMode.REFLECTION_MODE</op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.chooseAccessibleSuper</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassInfo.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="get">typeArgs</op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders.registerOrGetExisting</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.EncodingMode.REFLECTION_MODE</op>
                     <op code="call">
                        <name>com.jsoniter.output.ReflectionEncoderFactory.create</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.Codegen.isDoingStaticCodegen</op>
                     <op code="call">
                        <name>java.lang.Class.forName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.newInstance</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.EncodingMode.STATIC_MODE</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.genSource</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.Codegen.generatedSources</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.Codegen.isDoingStaticCodegen</op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.jsoniter.output.DynamicCodegen.gen</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.staticGen</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>java.util.Arrays.toString</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="addPlaceholderEncoderToSupportRecursiveStructure"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen$1.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;"
                       name="chooseAccessibleSuper"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isPublic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.walkSuperUntilPublic</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.createParameterizedType</name>
                        <args>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/Class;"
                       name="walkSuperUntilPublic"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Class</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Class.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isPublic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.walkSuperUntilPublic</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/output/CodegenResult;"
                       name="getGeneratedSource"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="get_static">com.jsoniter.output.Codegen.generatedSources</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Ljava/lang/String;Lcom/jsoniter/output/CodegenResult;)V"
                       name="staticGen"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.createDir</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="CC">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.Codegen.isDoingStaticCodegen</op>
                     <op code="get">outputDir</op>
                     <op code="call">
                        <name>java.io.File.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.FileOutputStream.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/File">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/OutputStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.staticGen</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/io/OutputStreamWriter">?</arg>
                           <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.FileOutputStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.FileOutputStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Ljava/lang/String;Ljava/io/OutputStreamWriter;Lcom/jsoniter/output/CodegenResult;)V"
                       name="staticGen"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/io/OutputStreamWriter">?</arg>
                     <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.lastIndexOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.lastIndexOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.generateWrapperCode</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="createDir"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.split</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.Codegen.isDoingStaticCodegen</op>
                     <op code="get">outputDir</op>
                     <op code="call">
                        <name>java.io.File.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.File.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/File">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.File.mkdir</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/ClassInfo;)Lcom/jsoniter/output/CodegenResult;"
                       name="genSource"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Lcom/jsoniter/output/CodegenResult</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplArray.genArray</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplMap.genMap</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplArray.genCollection</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isEnum</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplNative.genEnum</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenImplObject.genObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lcom/jsoniter/spi/TypeLiteral;Lcom/jsoniter/output/CodegenAccess$StaticCodegenTarget;)V"
                       name="staticGenEncoders"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Lcom/jsoniter/output/CodegenAccess$StaticCodegenTarget">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.output.Codegen.isDoingStaticCodegen</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.gen</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.Codegen.generatedSources</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.Codegen.reflectionEncoders</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DynamicCodegen"><!--Package: com.jsoniter.output; name: com.jsoniter.output.DynamicCodegen; file: com.jsoniter.output.DynamicCodegen-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljavassist/ClassPool">pool</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Ljava/lang/String;Lcom/jsoniter/output/CodegenResult;)Lcom/jsoniter/spi/Encoder;"
                       name="gen"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/output/CodegenResult">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.DynamicCodegen.pool</op>
                     <op code="call">
                        <name>javassist.ClassPool.makeClass</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.DynamicCodegen.pool</op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.ClassPool.get</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.setInterfaces</name>
                        <args>
                           <arg type="[Ljavassist/CtClass">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtNewMethod.make</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljavassist/CtClass">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.addMethod</name>
                        <args>
                           <arg type="Ljavassist/CtMethod">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.generateWrapperCode</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.System.getenv</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtNewMethod.make</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljavassist/CtClass">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.addMethod</name>
                        <args>
                           <arg type="Ljavassist/CtMethod">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.toClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.newInstance</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>javassist.ClassPool.getDefault</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.DynamicCodegen.pool</op>
                     <op code="get_static">com.jsoniter.output.DynamicCodegen.pool</op>
                     <op code="call">
                        <name>javassist.ClassClassPath.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.ClassPool.insertClassPath</name>
                        <args>
                           <arg type="Ljavassist/ClassPath">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenResult"><!--Package: com.jsoniter.output; name: com.jsoniter.output.CodegenResult; file: com.jsoniter.output.CodegenResult-->
            <attributes>
               <attribute final="true" public="false" static="false" type="Z">supportBuffer</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">prelude</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">epilogue</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/StringBuilder">lines</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/StringBuilder">buffered</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">prelude</op>
                     <op code="put">epilogue</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">lines</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">buffered</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">supportBuffer</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="append"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.contains</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.appendBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">lines</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">lines</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(C)V"
                       name="buffer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="C">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">supportBuffer</op>
                     <op code="get">buffered</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.UnsupportedOperationException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="buffer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">supportBuffer</op>
                     <op code="get">buffered</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.UnsupportedOperationException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="flushBuffer"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">buffered</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">prelude</op>
                     <op code="get">buffered</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">prelude</op>
                     <op code="get">buffered</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">epilogue</op>
                     <op code="get">buffered</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.setLength</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">lines</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="appendBuffer"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">epilogue</op>
                     <op code="get">lines</op>
                     <op code="get">epilogue</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.bufferToWriteOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">lines</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">epilogue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/String;"
                       name="generateWrapperCode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">prelude</op>
                     <op code="get">prelude</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.bufferToWriteOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">epilogue</op>
                     <op code="get">epilogue</op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.bufferToWriteOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Ljava/lang/String;)V"
                       name="append"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="bufferToWriteOp"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenResult.escape</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(C)Ljava/lang/String;"
                       name="escape"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="C">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.valueOf</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapKeyEncoders$DynamicKeyEncoder"><!--Package: com.jsoniter.output; name: com.jsoniter.output.MapKeyEncoders$DynamicKeyEncoder; file: com.jsoniter.output.MapKeyEncoders$DynamicKeyEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders.registerOrGetExisting</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapKeyEncoders"><!--Package: com.jsoniter.output; name: com.jsoniter.output.MapKeyEncoders; file: com.jsoniter.output.MapKeyEncoders-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Encoder;"
                       name="registerOrGetExisting"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getMapKeyEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getMapKeyEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders.createDefaultEncoder</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewMapEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Encoder;"
                       name="createDefaultEncoder"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders$StringKeyEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/MapKeyEncoders$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders$DynamicKeyEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/MapKeyEncoders$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders$DynamicKeyEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/MapKeyEncoders$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isEnum</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders$StringKeyEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/MapKeyEncoders$1">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.CodegenImplNative.NATIVE_ENCODERS</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders$NumberKeyEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                           <arg type="Lcom/jsoniter/output/MapKeyEncoders$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsonStreamPool"><!--Package: com.jsoniter.output; name: com.jsoniter.output.JsonStreamPool; file: com.jsoniter.output.JsonStreamPool-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/ThreadLocal">slot1</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/ThreadLocal">slot2</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/output/JsonStream;"
                       name="borrowJsonStream"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/output/JsonStream</return>
                  <ops>
                     <op code="get_static">com.jsoniter.output.JsonStreamPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.JsonStreamPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.JsonStreamPool.slot2</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.JsonStreamPool.slot2</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/OutputStream">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="returnJsonStream"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">configCache</op>
                     <op code="put">indention</op>
                     <op code="get_static">com.jsoniter.output.JsonStreamPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.JsonStreamPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.JsonStreamPool.slot2</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.output.JsonStreamPool.slot2</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.ThreadLocal.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.JsonStreamPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.output.JsonStreamPool.slot2</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsonStream"><!--Package: com.jsoniter.output; name: com.jsoniter.output.JsonStream; file: com.jsoniter.output.JsonStream-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/Config">configCache</attribute>
               <attribute final="false" public="false" static="false" type="I">indention</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/OutputStream">out</attribute>
               <attribute final="false" public="false" static="false" type="[B">buf</attribute>
               <attribute final="false" public="false" static="false" type="I">count</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/OutputStream;I)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/OutputStream">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.io.OutputStream.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">indention</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">out</op>
                     <op code="put">buf</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/OutputStream;)V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/OutputStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">out</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="ensure"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.growAtLeast</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="growAtLeast"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">buf</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="write"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(BB)V"
                       name="write"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(BBB)V"
                       name="write"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(BBBB)V"
                       name="write"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(BBBBB)V"
                       name="write"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(BBBBBB)V"
                       name="write"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)V"
                       name="write"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">out</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">out</op>
                     <op code="call">
                        <name>java.io.OutputStream.write</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="flush"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">out</op>
                     <op code="call">
                        <name>java.io.OutputStream.flush</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="close"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">out</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">out</op>
                     <op code="call">
                        <name>java.io.OutputStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">out</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="flushBuffer"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">out</op>
                     <op code="get">out</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>java.io.OutputStream.write</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplString.writeString</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="writeRaw"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeRaw</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;I)V"
                       name="writeRaw"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">out</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="II[BI">?</arg>
                        </args>
                     </op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="II[BI">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="put">count</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.flushBuffer</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="II[BI">?</arg>
                        </args>
                     </op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Boolean;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Boolean">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Boolean.booleanValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeTrue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeFalse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeTrue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeFalse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeTrue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeFalse"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBBB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Short;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Short">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Short.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(S)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="S">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Integer;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Integer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeInt</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Long;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Long">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Long.longValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeLong</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Float;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Float">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Float.floatValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(F)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="F">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeFloat</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Double;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Double">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.StreamImplNumber.writeDouble</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/any/Any;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/any/Any">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.writeTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeNull"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BBBB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeEmptyObject"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeEmptyArray"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeArrayStart"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeMore"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeIndention"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="writeIndention"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.ensure</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">count</op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="put">count</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeArrayEnd"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">indention</op>
                     <op code="put">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeObjectStart"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">indention</op>
                     <op code="put">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="writeObjectField"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)V"
                       name="writeObjectField"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.MapKeyEncoders.registerOrGetExisting</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectField</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/spi/Encoder;)V"
                       name="writeObjectField"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="get">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="BB">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="writeObjectEnd"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.indentionStep</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeIndention</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">indention</op>
                     <op code="put">indention</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;Ljava/lang/Object;)V"
                       name="writeVal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.Codegen.getEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder.encode</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config;"
                       name="currentConfig"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config</return>
                  <ops>
                     <op code="get">configCache</op>
                     <op code="get">configCache</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">configCache</op>
                     <op code="get">configCache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;Ljava/lang/Object;Ljava/io/OutputStream;)V"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/io/OutputStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/io/OutputStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Ljava/io/OutputStream;)V"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/io/OutputStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.borrowJsonStream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.reset</name>
                        <args>
                           <arg type="Ljava/io/OutputStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;Ljava/io/OutputStream;)V"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/io/OutputStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/io/OutputStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;Ljava/io/OutputStream;)V"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/io/OutputStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.borrowJsonStream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.reset</name>
                        <args>
                           <arg type="Ljava/io/OutputStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/io/OutputStream;)V"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/io/OutputStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.borrowJsonStream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.reset</name>
                        <args>
                           <arg type="Ljava/io/OutputStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;Ljava/lang/Object;)Ljava/lang/String;"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.escapeUnicode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="ZLjava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Ljava/lang/String;"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.escapeUnicode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="ZLjava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;)Ljava/lang/String;"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.escapeUnicode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="ZLjava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;)Ljava/lang/String;"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.escapeUnicode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="ZLjava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(ZLjava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/String;"
                       name="serialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.borrowJsonStream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.reset</name>
                        <args>
                           <arg type="Ljava/io/OutputStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[BIILjava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStreamPool.returnJsonStream</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/EncodingMode;)V"
                       name="setMode"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/EncodingMode">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDefaultConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.copyBuilder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.encodingMode</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/EncodingMode">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.build</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setDefaultConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="setIndentionStep"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDefaultConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.copyBuilder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.indentionStep</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.build</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setDefaultConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Lcom/jsoniter/spi/Encoder$ReflectionEncoder;)V"
                       name="registerNativeEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.output.CodegenImplNative.NATIVE_ENCODERS</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Slice;"
                       name="buffer"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="get">buf</op>
                     <op code="get">count</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.jsoniter">
         <class id="CodegenImplEnum"><!--Package: com.jsoniter; name: com.jsoniter.CodegenImplEnum; file: com.jsoniter.CodegenImplEnum-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)Ljava/lang/String;"
                       name="genEnum"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getEnumConstants</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.asList</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.buildTriTree</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.renderTriTree</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;)Ljava/util/Map;"
                       name="buildTriTree"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Byte.valueOf</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Byte.valueOf</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Byte.valueOf</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)Ljava/lang/String;"
                       name="renderTriTree"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.addFieldDispatch</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="IILjava/util/Map">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;IILjava/util/Map;Ljava/util/List;)V"
                       name="addFieldDispatch"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.addFieldDispatch</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="IILjava/util/Map">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.addFieldDispatch</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="IILjava/util/Map">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Ljava/lang/String;)V"
                       name="append"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IterImpl"><!--Package: com.jsoniter; name: com.jsoniter.IterImpl; file: com.jsoniter.IterImpl-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/math/BigInteger">maxLong</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/math/BigInteger">minLong</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/math/BigInteger">maxInt</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/math/BigInteger">minInt</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="readObjectFieldAsHash"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/spi/Slice;"
                       name="readObjectFieldAsSlice"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skipArray"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skipObject"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skipString"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplSkip.findStringEnd</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skipUntilBreak"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="put">head</op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="skipNumber"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="put">head</op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/spi/Slice;"
                       name="readSlice"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.findSliceEnd</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">reusableSlice</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="get">reusableSlice</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)B"
                       name="nextToken"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)B"
                       name="readByte"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/any/Any;"
                       name="readAny"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyString</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipArray</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyArray</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyObject</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipNumber</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyDouble</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyLong</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;I)V"
                       name="skipFixedBytes"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="loadMore"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;I)I"
                       name="readStringSlowPath"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.translateHex</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.translateHex</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.translateHex</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.translateHex</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.isHighSurrogate</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.isLowSurrogate</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;I)I"
                       name="updateStringCopyBound"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;B)I"
                       name="readInt"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.assertNotLeadingZero</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readIntSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;B)J"
                       name="readLong"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readLongSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)D"
                       name="readDouble"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>D</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplNumber.readLong</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readLong</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.POW10</op>
                     <op code="get">head</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.POW10</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.IterImpl.maxLong</op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.IterImpl.minLong</op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.IterImpl.maxInt</op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.IterImpl.minInt</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DynamicCodegen"><!--Package: com.jsoniter; name: com.jsoniter.DynamicCodegen; file: com.jsoniter.DynamicCodegen-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljavassist/ClassPool">pool</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/jsoniter/spi/Decoder;"
                       name="gen"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="get_static">com.jsoniter.DynamicCodegen.pool</op>
                     <op code="call">
                        <name>javassist.ClassPool.makeClass</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.DynamicCodegen.pool</op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.ClassPool.get</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.setInterfaces</name>
                        <args>
                           <arg type="[Ljavassist/CtClass">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtNewMethod.make</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljavassist/CtClass">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.addMethod</name>
                        <args>
                           <arg type="Ljavassist/CtMethod">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtNewMethod.make</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljavassist/CtClass">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.addMethod</name>
                        <args>
                           <arg type="Ljavassist/CtMethod">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.toClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.newInstance</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enableStreamingSupport"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.DynamicCodegen.pool</op>
                     <op code="call">
                        <name>javassist.ClassPool.makeClass</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.DynamicCodegen.pool</op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.ClassPool.get</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.setSuperclass</name>
                        <args>
                           <arg type="Ljavassist/CtClass">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.CtClass.toClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>javassist.ClassPool.getDefault</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.DynamicCodegen.pool</op>
                     <op code="get_static">com.jsoniter.DynamicCodegen.pool</op>
                     <op code="call">
                        <name>javassist.ClassClassPath.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>javassist.ClassPool.insertClassPath</name>
                        <args>
                           <arg type="Ljavassist/ClassPath">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IterImplArray"><!--Package: com.jsoniter; name: com.jsoniter.IterImplArray; file: com.jsoniter.IterImplArray-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="readArray"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;Lcom/jsoniter/JsonIterator$ReadArrayCallback;Ljava/lang/Object;)Z"
                       name="readArrayCB"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator$ReadArrayCallback">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator$ReadArrayCallback.handle</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator$ReadArrayCallback.handle</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IterImplForStreaming$numberChars"><!--Package: com.jsoniter; name: com.jsoniter.IterImplForStreaming$numberChars; file: com.jsoniter.IterImplForStreaming$numberChars-->
            <attributes>
               <attribute final="false" public="false" static="false" type="[C">chars</attribute>
               <attribute final="false" public="false" static="false" type="I">charsLength</attribute>
               <attribute final="false" public="false" static="false" type="Z">dotFound</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IterImplNumber"><!--Package: com.jsoniter; name: com.jsoniter.IterImplNumber; file: com.jsoniter.IterImplNumber-->
            <attributes>
               <attribute final="true" public="false" static="true" type="[I">intDigits</attribute>
               <attribute final="true" public="false" static="true" type="[I">floatDigits</attribute>
               <attribute final="true" public="false" static="true" type="I">END_OF_NUMBER</attribute>
               <attribute final="true" public="false" static="true" type="I">DOT_IN_NUMBER</attribute>
               <attribute final="true" public="false" static="true" type="I">INVALID_CHAR_FOR_NUMBER</attribute>
               <attribute final="true" public="false" static="true" type="[J">POW10</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)D"
                       name="readDouble"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readDouble</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readDouble</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)F"
                       name="readFloat"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplNumber.readDouble</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="readInt"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readInt</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readInt</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)J"
                       name="readLong"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.assertNotLeadingZero</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readLong</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.assertNotLeadingZero</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readLong</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="put_static">com.jsoniter.IterImplNumber.floatDigits</op>
                     <op code="put_static">com.jsoniter.IterImplNumber.POW10</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.floatDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.floatDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.floatDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.floatDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.floatDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.floatDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.floatDigits</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.floatDigits</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IterImplForStreaming"><!--Package: com.jsoniter; name: com.jsoniter.IterImplForStreaming; file: com.jsoniter.IterImplForStreaming-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="readObjectFieldAsHash"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/spi/Slice;"
                       name="readObjectFieldAsSlice"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.skipWhitespacesWithoutLoadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.tail</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.head</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.data</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.head</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skipArray"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skipObject"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skipString"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplSkip.findStringEnd</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skipUntilBreak"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="skipNumber"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/spi/Slice;"
                       name="readSlice"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.findSliceEnd</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">reusableSlice</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="get">reusableSlice</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.findSliceEnd</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="get">reusableSlice</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get">reusableSlice</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)B"
                       name="nextToken"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="loadMore"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">in</op>
                     <op code="get">skipStartedAt</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.keepSkippedBytesThenRead</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">in</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.io.InputStream.read</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="keepSkippedBytesThenRead"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">skipStartedAt</op>
                     <op code="get">skipStartedAt</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get">tail</op>
                     <op code="get">skipStartedAt</op>
                     <op code="get">buf</op>
                     <op code="get">skipStartedAt</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">buf</op>
                     <op code="get">in</op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.io.InputStream.read</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="get">skipStartedAt</op>
                     <op code="get">buf</op>
                     <op code="get">skipStartedAt</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">in</op>
                     <op code="get">buf</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.io.InputStream.read</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">skipStartedAt</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)B"
                       name="readByte"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/any/Any;"
                       name="readAny"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="put">skipStartedAt</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.copySkippedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyString</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">skipStartedAt</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">skipStartedAt</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">skipStartedAt</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipArray</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.copySkippedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyArray</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.copySkippedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyObject</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.skipNumber</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.copySkippedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyDouble</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.copySkippedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.lazyLong</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)[B"
                       name="copySkippedBytes"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="get">skipStartedAt</op>
                     <op code="put">skipStartedAt</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;I)V"
                       name="skipFixedBytes"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;I)I"
                       name="updateStringCopyBound"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;I)I"
                       name="readStringSlowPath"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.translateHex</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.translateHex</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.translateHex</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.translateHex</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.isHighSurrogate</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.isLowSurrogate</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">reusableChars</op>
                     <op code="get">reusableChars</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;J)J"
                       name="readLongSlowPath"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="J">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;I)I"
                       name="readIntSlowPath"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)D"
                       name="readDoubleSlowPath"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readNumber</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">charsLength</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.whatIsNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.STRING</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">chars</op>
                     <op code="get">charsLength</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[CII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.NumberFormatException.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/IterImplForStreaming$numberChars;"
                       name="readNumber"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/IterImplForStreaming$numberChars</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="put">reusableChars</op>
                     <op code="get">buf</op>
                     <op code="get">reusableChars</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming$numberChars.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">reusableChars</op>
                     <op code="put">chars</op>
                     <op code="put">charsLength</op>
                     <op code="put">dotFound</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.loadMore</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming$numberChars.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">reusableChars</op>
                     <op code="put">chars</op>
                     <op code="put">charsLength</op>
                     <op code="put">dotFound</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)D"
                       name="readDouble"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;B)J"
                       name="readLong"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.assertNotLeadingZero</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readLongSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;B)I"
                       name="readInt"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.assertNotLeadingZero</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readIntSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="assertNotLeadingZero"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.IterImplNumber.intDigits</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">head</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IterImplObject"><!--Package: com.jsoniter; name: com.jsoniter.IterImplObject; file: com.jsoniter.IterImplObject-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/String;"
                       name="readObject"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;Lcom/jsoniter/JsonIterator$ReadObjectCallback;Ljava/lang/Object;)Z"
                       name="readObjectCB"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator$ReadObjectCallback">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator$ReadObjectCallback.handle</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator$ReadObjectCallback.handle</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IterImplSkip"><!--Package: com.jsoniter; name: com.jsoniter.IterImplSkip; file: com.jsoniter.IterImplSkip-->
            <attributes>
               <attribute final="true" public="false" static="true" type="[Z">breaks</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="skip"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipUntilBreak</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipArray</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="findStringEnd"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                     <op code="get_static">com.jsoniter.IterImplSkip.breaks</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IterImplString"><!--Package: com.jsoniter; name: com.jsoniter.IterImplString; file: com.jsoniter.IterImplString-->
            <attributes>
               <attribute final="true" public="false" static="true" type="[I">hexDigits</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/String;"
                       name="readString"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.parse</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[CII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="parse"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">reusableChars</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.updateStringCopyBound</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                     <op code="get">reusableChars</op>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readStringSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(B)I"
                       name="translateHex"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get_static">com.jsoniter.IterImplString.hexDigits</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.IndexOutOfBoundsException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="findSliceEnd"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.IterImplString.hexDigits</op>
                     <op code="get_static">com.jsoniter.IterImplString.hexDigits</op>
                     <op code="get_static">com.jsoniter.IterImplString.hexDigits</op>
                     <op code="get_static">com.jsoniter.IterImplString.hexDigits</op>
                     <op code="get_static">com.jsoniter.IterImplString.hexDigits</op>
                     <op code="get_static">com.jsoniter.IterImplString.hexDigits</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapKeyDecoders"><!--Package: com.jsoniter; name: com.jsoniter.MapKeyDecoders; file: com.jsoniter.MapKeyDecoders-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Decoder;"
                       name="registerOrGetExisting"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getMapKeyDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getMapKeyDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.MapKeyDecoders.createMapKeyDecoder</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewMapDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Decoder;"
                       name="createMapKeyDecoder"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.MapKeyDecoders$StringKeyDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/MapKeyDecoders$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isEnum</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.MapKeyDecoders$EnumKeyDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/MapKeyDecoders$1">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.CodegenImplNative.NATIVE_DECODERS</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.MapKeyDecoders$NumberKeyDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                           <arg type="Lcom/jsoniter/MapKeyDecoders$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsonIterator"><!--Package: com.jsoniter; name: com.jsoniter.JsonIterator; file: com.jsoniter.JsonIterator-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/Config">configCache</attribute>
               <attribute final="false" public="false" static="true" type="Z">isStreamingEnabled</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="[Lcom/jsoniter/ValueType">valueTypes</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/InputStream">in</attribute>
               <attribute final="false" public="false" static="false" type="[B">buf</attribute>
               <attribute final="false" public="false" static="false" type="I">head</attribute>
               <attribute final="false" public="false" static="false" type="I">tail</attribute>
               <attribute final="false" public="false" static="false" type="I">skipStartedAt</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">tempObjects</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Slice">reusableSlice</attribute>
               <attribute final="false" public="false" static="false" type="[C">reusableChars</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Object">existingObject</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lcom/jsoniter/JsonIterator$ReadArrayCallback">fillArray</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lcom/jsoniter/JsonIterator$ReadObjectCallback">fillObject</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/InputStream;[BII)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/io/InputStream">?</arg>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">skipStartedAt</op>
                     <op code="put">tempObjects</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">reusableSlice</op>
                     <op code="put">reusableChars</op>
                     <op code="put">existingObject</op>
                     <op code="put">in</op>
                     <op code="put">buf</op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/InputStream">?</arg>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/InputStream;I)Lcom/jsoniter/JsonIterator;"
                       name="parse"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/InputStream">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/JsonIterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.enableStreamingSupport</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/InputStream">?</arg>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([B)Lcom/jsoniter/JsonIterator;"
                       name="parse"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                  </args>
                  <return>Lcom/jsoniter/JsonIterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/InputStream">?</arg>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)Lcom/jsoniter/JsonIterator;"
                       name="parse"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/JsonIterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/InputStream">?</arg>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/JsonIterator;"
                       name="parse"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/JsonIterator</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.parse</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Slice;)Lcom/jsoniter/JsonIterator;"
                       name="parse"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                  </args>
                  <return>Lcom/jsoniter/JsonIterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.data</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.head</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.tail</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/InputStream">?</arg>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([B)V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">buf</op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">buf</op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Slice;)V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.data</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">buf</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.head</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">head</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.tail</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/InputStream;)V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/InputStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.enableStreamingSupport</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">in</op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="close"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">in</op>
                     <op code="get">in</op>
                     <op code="call">
                        <name>java.io.InputStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="unreadByte"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/jsoniter/spi/JsonException;"
                       name="reportError"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/JsonException</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="currentBuffer"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">buf</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">buf</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="readNull"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="readBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()S"
                       name="readShort"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>S</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readInt</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="readInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplNumber.readInt</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="readLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplNumber.readLong</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="readArray"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplArray.readArray</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="readNumberAsString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readNumber</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">chars</op>
                     <op code="get">charsLength</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[CII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator$ReadArrayCallback;Ljava/lang/Object;)Z"
                       name="readArrayCB"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator$ReadArrayCallback">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplArray.readArrayCB</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator$ReadArrayCallback">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="readString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplString.readString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Slice;"
                       name="readStringAsSlice"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="readObject"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplObject.readObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator$ReadObjectCallback;Ljava/lang/Object;)V"
                       name="readObjectCB"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator$ReadObjectCallback">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplObject.readObjectCB</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator$ReadObjectCallback">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="readFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplNumber.readFloat</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="readDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplNumber.readDouble</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="readBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.whatIsNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.NULL</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.skip</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readNumber</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">chars</op>
                     <op code="get">charsLength</op>
                     <op code="call">
                        <name>java.math.BigDecimal.&lt;init&gt;</name>
                        <args>
                           <arg type="[CII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="readBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.whatIsNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.NULL</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.skip</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readNumber</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">chars</op>
                     <op code="get">charsLength</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[CII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="readAny"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readAny</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="read"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.whatIsNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIterator$3.$SwitchMap$com$jsoniter$ValueType</op>
                     <op code="call">
                        <name>com.jsoniter.ValueType.ordinal</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImplForStreaming.readNumber</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">chars</op>
                     <op code="get">charsLength</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[CII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">dotFound</op>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Math.floor</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.isInfinite</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Long.longValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readBoolean</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Boolean.valueOf</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIterator.fillArray</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readArrayCB</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator$ReadArrayCallback">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIterator.fillObject</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readObjectCB</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator$ReadObjectCallback">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Ljava/lang/Object;"
                       name="read"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="put">existingObject</op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config;"
                       name="currentConfig"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config</return>
                  <ops>
                     <op code="get">configCache</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">configCache</op>
                     <op code="get">configCache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;)Ljava/lang/Object;"
                       name="read"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="put">existingObject</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/Object;"
                       name="read"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;)Ljava/lang/Object;"
                       name="read"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/Object;"
                       name="read"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.currentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="whatIsNext"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="skip"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImplSkip.skip</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[BLjava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[BLjava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;Ljava/lang/String;Lcom/jsoniter/spi/TypeLiteral;)Ljava/lang/Object;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[BLcom/jsoniter/spi/TypeLiteral">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/TypeLiteral;)Ljava/lang/Object;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[BLcom/jsoniter/spi/TypeLiteral">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;[BLjava/lang/Class;)Ljava/lang/Object;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="B">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[BLjava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BLjava/lang/Class;)Ljava/lang/Object;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.findLastNotSpacePos</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;[BLcom/jsoniter/spi/TypeLiteral;)Ljava/lang/Object;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="B">?</arg>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[BLcom/jsoniter/spi/TypeLiteral">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BLcom/jsoniter/spi/TypeLiteral;)Ljava/lang/Object;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.findLastNotSpacePos</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;Ljava/lang/String;)Lcom/jsoniter/any/Any;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/any/Any;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;[B)Lcom/jsoniter/any/Any;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.deserialize</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([B)Lcom/jsoniter/any/Any;"
                       name="deserialize"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.findLastNotSpacePos</name>
                        <args>
                           <arg type="[B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([B)I"
                       name="findLastNotSpacePos"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="B">?</arg>
                  </args>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/DecodingMode;)V"
                       name="setMode"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/DecodingMode">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDefaultConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.copyBuilder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.decodingMode</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/DecodingMode">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.build</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setDefaultConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enableStreamingSupport"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.JsonIterator.isStreamingEnabled</op>
                     <op code="put_static">com.jsoniter.JsonIterator.isStreamingEnabled</op>
                     <op code="call">
                        <name>com.jsoniter.DynamicCodegen.enableStreamingSupport</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.JsonIterator.isStreamingEnabled</op>
                     <op code="put_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.STRING</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.BOOLEAN</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.BOOLEAN</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.NULL</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.ARRAY</op>
                     <op code="get_static">com.jsoniter.JsonIterator.valueTypes</op>
                     <op code="get_static">com.jsoniter.ValueType.OBJECT</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.JsonIterator.fillArray</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator$2.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.JsonIterator.fillObject</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsonIteratorPool"><!--Package: com.jsoniter; name: com.jsoniter.JsonIteratorPool; file: com.jsoniter.JsonIteratorPool-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/lang/ThreadLocal">slot1</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/lang/ThreadLocal">slot2</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/JsonIterator;"
                       name="borrowJsonIterator"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/JsonIterator</return>
                  <ops>
                     <op code="get_static">com.jsoniter.JsonIteratorPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIteratorPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIteratorPool.slot2</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIteratorPool.slot2</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.parse</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="returnJsonIterator"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">configCache</op>
                     <op code="put">existingObject</op>
                     <op code="get_static">com.jsoniter.JsonIteratorPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIteratorPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIteratorPool.slot2</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.JsonIteratorPool.slot2</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.ThreadLocal.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.JsonIteratorPool.slot1</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.JsonIteratorPool.slot2</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapKeyDecoders$EnumKeyDecoder"><!--Package: com.jsoniter; name: com.jsoniter.MapKeyDecoders$EnumKeyDecoder; file: com.jsoniter.MapKeyDecoders$EnumKeyDecoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/Class">enumClass</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">enumClass</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">enumClass</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapKeyDecoders$NumberKeyDecoder"><!--Package: com.jsoniter; name: com.jsoniter.MapKeyDecoders$NumberKeyDecoder; file: com.jsoniter.MapKeyDecoders$NumberKeyDecoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Decoder">decoder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/spi/Decoder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">decoder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">decoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionCollectionDecoder"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionCollectionDecoder; file: com.jsoniter.ReflectionCollectionDecoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/reflect/Constructor">ctor</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Decoder">compTypeDecoder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;[Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getConstructor</name>
                        <args>
                           <arg type="[Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">ctor</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">compTypeDecoder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.ReflectionCollectionDecoder.decode_</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode_"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.resetExistingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.newInstance</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Collection.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Collection.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapKeyDecoders$StringKeyDecoder"><!--Package: com.jsoniter; name: com.jsoniter.MapKeyDecoders$StringKeyDecoder; file: com.jsoniter.MapKeyDecoders$StringKeyDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionArrayDecoder"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionArrayDecoder; file: com.jsoniter.ReflectionArrayDecoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/Class">componentType</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Decoder">compTypeDecoder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getComponentType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">componentType</op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">compTypeDecoder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.resetExistingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readArrayStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.newInstance</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.newInstance</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.newInstance</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.newInstance</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.newInstance</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.newInstance</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">compTypeDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.newInstance</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.System.arraycopy</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionDecoderFactory"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionDecoderFactory; file: com.jsoniter.ReflectionDecoderFactory-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)Lcom/jsoniter/spi/Decoder;"
                       name="create"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionArrayDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionCollectionDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionMapDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isEnum</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionEnumDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.create</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionEnumDecoder"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionEnumDecoder; file: com.jsoniter.ReflectionEnumDecoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">enumMap</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Class">clazz</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">enumMap</op>
                     <op code="put">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getEnumConstants</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">enumMap</op>
                     <op code="call">
                        <name>java.lang.Object.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.make</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">enumMap</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionObjectDecoder$OnlyField"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionObjectDecoder$OnlyField; file: com.jsoniter.ReflectionObjectDecoder$OnlyField-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/ReflectionObjectDecoder">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/ReflectionObjectDecoder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder$OnlyField.decode_</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode_"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.resetExistingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.existingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$000</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.resetExistingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$500</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$600</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">mask</op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$700</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$500</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$600</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">mask</op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$700</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$800</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$900</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionObjectDecoder"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionObjectDecoder; file: com.jsoniter.ReflectionObjectDecoder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/lang/Object">NOT_SET</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">allBindings</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">tempCacheKey</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ctorArgsCacheKey</attribute>
               <attribute final="false" public="false" static="false" type="I">tempCount</attribute>
               <attribute final="false" public="false" static="false" type="J">expectedTracker</attribute>
               <attribute final="false" public="false" static="false" type="I">requiredIdx</attribute>
               <attribute final="false" public="false" static="false" type="I">tempIdx</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/ClassDescriptor">desc</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">allBindings</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.init</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)V"
                       name="init"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getDecodingClassDescriptor</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.addBinding</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="put">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">objectFactory</op>
                     <op code="get">ctor</op>
                     <op code="get">ctor</op>
                     <op code="get">ctor</op>
                     <op code="get">staticFactory</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.addBinding</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.addBinding</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.addBinding</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">requiredIdx</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">requiredIdx</op>
                     <op code="put">expectedTracker</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">tempIdx</op>
                     <op code="put">tempCount</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">tempCacheKey</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">ctorArgsCacheKey</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;Lcom/jsoniter/spi/Binding;)V"
                       name="addBinding"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">fromNames</op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">requiredIdx</op>
                     <op code="put">mask</op>
                     <op code="get">requiredIdx</op>
                     <op code="put">requiredIdx</op>
                     <op code="get">asExtraWhenPresent</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder$2.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="put">decoder</op>
                     <op code="get">decoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.decoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">decoder</op>
                     <op code="get">decoder</op>
                     <op code="get">valueTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">decoder</op>
                     <op code="get">tempIdx</op>
                     <op code="put">idx</op>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.make</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">allBindings</op>
                     <op code="call">
                        <name>java.util.Map.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">allBindings</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">tempIdx</op>
                     <op code="put">tempIdx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Decoder;"
                       name="create"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder$OnlyField.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder$WithWrapper.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder$WithCtor.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/spi/Binding;Ljava/lang/Object;)V"
                       name="setToBinding"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Ljava/util/Map;)V"
                       name="setExtra"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">desc</op>
                     <op code="get">asExtraForUnknownProperties</op>
                     <op code="get">desc</op>
                     <op code="get">onExtraProperties</op>
                     <op code="call">
                        <name>java.util.Map.keySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">onExtraProperties</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.setToBinding</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Binding;)Z"
                       name="canNotSetDirectly"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="get">method</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;Lcom/jsoniter/spi/Binding;)Ljava/lang/Object;"
                       name="decodeBinding"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">decoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;Ljava/lang/Object;Lcom/jsoniter/spi/Binding;)Ljava/lang/Object;"
                       name="decodeBinding"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">valueCanReuse</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.setExistingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.decodeBinding</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;Lcom/jsoniter/spi/Slice;Ljava/util/Map;)Ljava/util/Map;"
                       name="onUnknownProperty"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="get">desc</op>
                     <op code="get">asExtraForUnknownProperties</op>
                     <op code="get">desc</op>
                     <op code="get">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.skip</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)Ljava/util/List;"
                       name="collectMissingFields"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">allBindings</op>
                     <op code="call">
                        <name>java.util.Map.values</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Collection.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">mask</op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.addMissingField</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                           <arg type="JJLjava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;Ljava/lang/Object;)V"
                       name="applyWrappers"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">desc</op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">idx</op>
                     <op code="get_static">com.jsoniter.ReflectionObjectDecoder.NOT_SET</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;[Ljava/lang/Object;)Ljava/lang/Object;"
                       name="createNewObject"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">tempObjects</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">tempObjects</op>
                     <op code="get">tempObjects</op>
                     <op code="get">ctorArgsCacheKey</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">tempObjects</op>
                     <op code="get">ctorArgsCacheKey</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.fill</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">idx</op>
                     <op code="get_static">com.jsoniter.ReflectionObjectDecoder.NOT_SET</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.createNewObject</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)Ljava/lang/Object;"
                       name="createNewObject"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">objectFactory</op>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">objectFactory</op>
                     <op code="get">desc</op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Extension.create</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">staticFactory</op>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">staticFactory</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">desc</op>
                     <op code="get">ctor</op>
                     <op code="get">ctor</op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.newInstance</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.ReflectionObjectDecoder.NOT_SET</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionMapDecoder"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionMapDecoder; file: com.jsoniter.ReflectionMapDecoder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/reflect/Constructor">ctor</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Decoder">valueTypeDecoder</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Decoder">mapKeyDecoder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Class;[Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getConstructor</name>
                        <args>
                           <arg type="[Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">ctor</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.MapKeyDecoders.registerOrGetExisting</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">mapKeyDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">valueTypeDecoder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.ReflectionMapDecoder.decode_</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode_"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.resetExistingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.newInstance</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionMapDecoder.readMapKey</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">valueTypeDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="readMapKey"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">mapKeyDecoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionObjectDecoder$WithCtor"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionObjectDecoder$WithCtor; file: com.jsoniter.ReflectionObjectDecoder$WithCtor-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/ReflectionObjectDecoder">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/ReflectionObjectDecoder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder$WithCtor.decode_</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode_"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.resetExistingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tempObjects</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">tempObjects</op>
                     <op code="get">tempObjects</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1000</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1100</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">tempObjects</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1000</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1200</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.fill</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$500</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$600</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">mask</op>
                     <op code="get">idx</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$500</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$600</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">mask</op>
                     <op code="get">idx</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$800</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$900</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">idx</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1200</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">idx</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1200</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1500</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReflectionObjectDecoder$WithWrapper"><!--Package: com.jsoniter; name: com.jsoniter.ReflectionObjectDecoder$WithWrapper; file: com.jsoniter.ReflectionObjectDecoder$WithWrapper-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/ReflectionObjectDecoder">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/ReflectionObjectDecoder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder$WithWrapper.decode_</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode_"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.resetExistingObject</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$000</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">tempObjects</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">tempObjects</op>
                     <op code="get">tempObjects</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1000</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1100</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">tempObjects</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1000</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1200</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.fill</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$500</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$600</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">mask</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1600</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">idx</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$700</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$700</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$500</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$600</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Lcom/jsoniter/spi/Slice">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">mask</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1600</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">idx</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$700</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$700</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$800</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$900</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionObjectDecoder.access$1500</name>
                        <args>
                           <arg type="Lcom/jsoniter/ReflectionObjectDecoder">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplNative"><!--Package: com.jsoniter; name: com.jsoniter.CodegenImplNative; file: com.jsoniter.CodegenImplNative-->
            <attributes>
               <attribute final="true" public="false" static="true" type="Ljava/util/Map">NATIVE_READS</attribute>
               <attribute final="true" public="false" static="true" type="Ljava/util/Map">NATIVE_DECODERS</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="genReadOp"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.genReadOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="getTypeName"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Binding;)Ljava/lang/String;"
                       name="genField"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.decoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.genReadOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="genReadOp"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.CodegenImplNative.NATIVE_READS</op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.CodegenImplNative.NATIVE_READS</op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.canStaticAccess</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Boolean.TYPE</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Byte.TYPE</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Short.TYPE</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Character.TYPE</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Integer.TYPE</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Long.TYPE</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Float.TYPE</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Double.TYPE</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.CodegenImplNative.NATIVE_READS</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative$2.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.CodegenImplNative.NATIVE_DECODERS</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenAccess"><!--Package: com.jsoniter; name: com.jsoniter.CodegenAccess; file: com.jsoniter.CodegenAccess-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;JJLjava/lang/String;)V"
                       name="addMissingField"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="J">?</arg>
                     <arg type="J">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Collection;)Ljava/util/Collection;"
                       name="reuseCollection"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>Ljava/util/Collection</return>
                  <ops>
                     <op code="call">
                        <name>java.util.Collection.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="existingObject"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">existingObject</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="resetExistingObject"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">existingObject</op>
                     <op code="put">existingObject</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;Ljava/lang/Object;)V"
                       name="setExistingObject"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">existingObject</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="nextTokenIsComma"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextTokenIsCommaSlowPath</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;B)Z"
                       name="nextTokenIsCommaSlowPath"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="B">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)B"
                       name="nextToken"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/JsonIterator;)Z"
                       name="readBoolean"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$BooleanDecoder.decodeBoolean</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/JsonIterator;)S"
                       name="readShort"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>S</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$ShortDecoder.decodeShort</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/JsonIterator;)I"
                       name="readInt"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$IntDecoder.decodeInt</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/JsonIterator;)J"
                       name="readLong"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$LongDecoder.decodeLong</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/JsonIterator;)F"
                       name="readFloat"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$FloatDecoder.decodeFloat</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/JsonIterator;)D"
                       name="readDouble"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$DoubleDecoder.decodeDouble</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="read"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.Codegen.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="readArrayStart"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="readObjectStart"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="reportIncompleteObject"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="reportIncompleteArray"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/String;"
                       name="readObjectFieldAsString"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="readObjectFieldAsHash"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readObjectFieldAsHash</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/spi/Slice;"
                       name="readObjectFieldAsSlice"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readObjectFieldAsSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Lcom/jsoniter/spi/Slice;"
                       name="readSlice"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readSlice</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="readMapKey"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getMapKeyDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder.decode</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reportError</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="skipWhitespacesWithoutLoadMore"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">buf</op>
                     <op code="put">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lcom/jsoniter/spi/TypeLiteral;Lcom/jsoniter/CodegenAccess$StaticCodegenTarget;)V"
                       name="staticGenDecoders"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Lcom/jsoniter/CodegenAccess$StaticCodegenTarget">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.Codegen.staticGenDecoders</name>
                        <args>
                           <arg type="[Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Lcom/jsoniter/CodegenAccess$StaticCodegenTarget">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="head"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="get">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)V"
                       name="unreadByte"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.unreadByte</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)B"
                       name="readByte"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.readByte</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)I"
                       name="calcHash"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.calcHash</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;I)V"
                       name="skipFixedBytes"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.IterImpl.skipFixedBytes</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenAccess$StaticCodegenTarget"><!--Package: com.jsoniter; name: com.jsoniter.CodegenAccess$StaticCodegenTarget; file: com.jsoniter.CodegenAccess$StaticCodegenTarget-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">outputDir</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">outputDir</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplMap"><!--Package: com.jsoniter; name: com.jsoniter.CodegenImplMap; file: com.jsoniter.CodegenImplMap-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)Ljava/lang/String;"
                       name="genMap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">typeArgs</op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.genReadOp</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Ljava/lang/String;)V"
                       name="append"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Codegen"><!--Package: com.jsoniter; name: com.jsoniter.Codegen; file: com.jsoniter.Codegen-->
            <attributes>
               <attribute final="true" public="false" static="true" type="Ljava/util/Set">generatedClassNames</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Lcom/jsoniter/CodegenAccess$StaticCodegenTarget">isDoingStaticCodegen</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Decoder;"
                       name="getDecoder"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.gen</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Decoder;"
                       name="gen"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getExtensions</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Extension.chooseImplementation</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.chooseImpl</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Extension.createDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassInfo.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.CodegenImplNative.NATIVE_DECODERS</op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.addPlaceholderDecoderToSupportRecursiveStructure</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.decodingMode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.DecodingMode.REFLECTION_MODE</op>
                     <op code="call">
                        <name>com.jsoniter.ReflectionDecoderFactory.create</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.Codegen.isDoingStaticCodegen</op>
                     <op code="call">
                        <name>java.lang.Class.forName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.newInstance</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.DecodingMode.STATIC_MODE</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.genSource</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/DecodingMode">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.System.getenv</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.Codegen.generatedClassNames</op>
                     <op code="call">
                        <name>java.util.Set.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.Codegen.isDoingStaticCodegen</op>
                     <op code="call">
                        <name>com.jsoniter.DynamicCodegen.gen</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.staticGen</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>java.util.Arrays.toString</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="addPlaceholderDecoderToSupportRecursiveStructure"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.Codegen$1.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Z"
                       name="canStaticAccess"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get_static">com.jsoniter.Codegen.generatedClassNames</op>
                     <op code="call">
                        <name>java.util.Set.contains</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;"
                       name="chooseImpl"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getTypeImplementation</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.IllegalArgumentException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.createParameterizedType</name>
                        <args>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.IllegalArgumentException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.MapKeyDecoders.registerOrGetExisting</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.createParameterizedType</name>
                        <args>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.createParameterizedType</name>
                        <args>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;)V"
                       name="staticGen"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.Codegen.createDir</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="CC">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.Codegen.isDoingStaticCodegen</op>
                     <op code="get">outputDir</op>
                     <op code="call">
                        <name>java.io.File.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.FileOutputStream.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/File">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/OutputStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.staticGen</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/io/OutputStreamWriter">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.FileOutputStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.FileOutputStream.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/io/OutputStreamWriter;Ljava/lang/String;)V"
                       name="staticGen"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/io/OutputStreamWriter">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.lastIndexOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.lastIndexOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.OutputStreamWriter.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="createDir"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.split</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.Codegen.isDoingStaticCodegen</op>
                     <op code="get">outputDir</op>
                     <op code="call">
                        <name>java.io.File.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.File.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/io/File">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.File.mkdir</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/DecodingMode;Lcom/jsoniter/spi/ClassInfo;)Ljava/lang/String;"
                       name="genSource"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/DecodingMode">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.genArray</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplMap.genMap</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.genCollection</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.isEnum</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplEnum.genEnum</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getDecodingClassDescriptor</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.shouldUseStrictMode</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/DecodingMode">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.genObjectUsingStrict</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.genObjectUsingHash</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/DecodingMode;Lcom/jsoniter/spi/ClassDescriptor;)Z"
                       name="shouldUseStrictMode"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/DecodingMode">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.DecodingMode.DYNAMIC_MODE_AND_MATCH_FIELD_STRICTLY</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.allDecoderBindings</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">asExtraWhenPresent</op>
                     <op code="get">shouldSkip</op>
                     <op code="get">asExtraForUnknownProperties</op>
                     <op code="get">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lcom/jsoniter/spi/TypeLiteral;Lcom/jsoniter/CodegenAccess$StaticCodegenTarget;)V"
                       name="staticGenDecoders"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Lcom/jsoniter/CodegenAccess$StaticCodegenTarget">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.Codegen.isDoingStaticCodegen</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.Codegen.gen</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashSet.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.Codegen.generatedClassNames</op>
                     <op code="put_static">com.jsoniter.Codegen.isDoingStaticCodegen</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplObjectHash"><!--Package: com.jsoniter; name: com.jsoniter.CodegenImplObjectHash; file: com.jsoniter.CodegenImplObjectHash-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)Ljava/lang/String;"
                       name="genObjectUsingHash"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendVarDef</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendVarDef</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendVarDef</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendVarDef</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashSet.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.allDecoderBindings</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.keySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Collections.sort</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                           <arg type="Ljava/util/Comparator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.calcHash</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.genObjectUsingStrict</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashSet.contains</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.genObjectUsingStrict</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashSet.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendBindingSet</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendWrappers</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.genNewInstCode</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/ConstructorDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)I"
                       name="calcHash"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Lcom/jsoniter/spi/ClassDescriptor;Lcom/jsoniter/spi/Binding;)V"
                       name="appendBindingSet"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">name</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.genField</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;Ljava/lang/StringBuilder;)V"
                       name="appendWrappers"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendInvocation</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Lcom/jsoniter/spi/Binding;)V"
                       name="appendVarDef"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="get_static">com.jsoniter.CodegenImplObjectStrict.DEFAULT_VALUES</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Lcom/jsoniter/spi/ConstructorDescriptor;)Ljava/lang/String;"
                       name="genNewInstCode"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Lcom/jsoniter/spi/ConstructorDescriptor">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">objectFactory</op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">staticMethodName</op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">staticMethodName</op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="get">objectFactory</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendInvocation</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Ljava/util/List;)V"
                       name="appendInvocation"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Ljava/lang/String;)V"
                       name="append"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplArray"><!--Package: com.jsoniter; name: com.jsoniter.CodegenImplArray; file: com.jsoniter.CodegenImplArray-->
            <attributes>
               <attribute final="true" public="false" static="true" type="Ljava/util/Set">WITH_CAPACITY_COLLECTION_CLASSES</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)Ljava/lang/String;"
                       name="genArray"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getComponentType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.IllegalArgumentException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.genReadOp</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;)Ljava/lang/String;"
                       name="genCollection"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get_static">com.jsoniter.CodegenImplArray.WITH_CAPACITY_COLLECTION_CLASSES</op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.util.Set.contains</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.genCollectionWithCapacity</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="get">typeArgs</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.genCollectionWithoutCapacity</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="genCollectionWithCapacity"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.genReadOp</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="genCollectionWithoutCapacity"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.genReadOp</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Ljava/lang/String;)V"
                       name="append"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplArray$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.CodegenImplArray.WITH_CAPACITY_COLLECTION_CLASSES</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CodegenImplObjectStrict"><!--Package: com.jsoniter; name: com.jsoniter.CodegenImplObjectStrict; file: com.jsoniter.CodegenImplObjectStrict-->
            <attributes>
               <attribute final="true" public="false" static="true" type="Ljava/util/Map">DEFAULT_VALUES</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)Ljava/lang/String;"
                       name="genObjectUsingStrict"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.allDecoderBindings</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.assignMaskForRequiredProperties</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.buildTriTree</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.appendMissingRequiredProperties</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendVarDef</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.appendMissingRequiredProperties</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendVarDef</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendVarDef</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendVarDef</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">onExtraProperties</op>
                     <op code="get">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.renderTriTree</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.updateBindingSetOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.updateBindingSetOp</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.hasAnythingToBindFrom</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.appendOnUnknownField</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.hasAnythingToBindFrom</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.appendOnUnknownField</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.appendMissingRequiredProperties</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">onExtraProperties</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.appendSetExtraProperteis</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="get">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.appendSetExtraToKeyValueTypeWrappers</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.getTypeName</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.appendWrappers</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="get">ctor</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.genNewInstCode</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/ConstructorDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="appendSetExtraToKeyValueTypeWrappers"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="appendSetExtraProperteis"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">onExtraProperties</op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.isSameClass</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="get">field</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;)Z"
                       name="hasAnythingToBindFrom"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;)I"
                       name="assignMaskForRequiredProperties"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="put">mask</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/Binding;)Ljava/lang/String;"
                       name="updateBindingSetOp"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.indexOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.indexOf</name>
                        <args>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.indexOf</name>
                        <args>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">field</op>
                     <op code="get">valueCanReuse</op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="II">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="appendMissingRequiredProperties"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.allDecoderBindings</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="get">mask</op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="get">field</op>
                     <op code="get">onMissingProperties</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">onMissingProperties</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="appendOnUnknownField"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">asExtraForUnknownProperties</op>
                     <op code="get">onExtraProperties</op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="CC">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">asExtraForUnknownProperties</op>
                     <op code="get">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;)Ljava/util/Map;"
                       name="buildTriTree"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Byte.valueOf</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Byte.valueOf</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Byte.valueOf</name>
                        <args>
                           <arg type="B">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)Ljava/lang/String;"
                       name="renderTriTree"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.addFieldDispatch</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="IILjava/util/Map">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;IILjava/util/Map;Ljava/util/List;)V"
                       name="addFieldDispatch"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">asExtraWhenPresent</op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="CC">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">shouldSkip</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplNative.genField</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">asMissingWhenNotPresent</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">mask</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.addFieldDispatch</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="IILjava/util/Map">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.addFieldDispatch</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="IILjava/util/Map">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Lcom/jsoniter/spi/ConstructorDescriptor;)Ljava/lang/String;"
                       name="genObjectUsingSkip"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Lcom/jsoniter/spi/ConstructorDescriptor">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict.append</name>
                        <args>
                           <arg type="Ljava/lang/StringBuilder">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectHash.genNewInstCode</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/ConstructorDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/StringBuilder;Ljava/lang/String;)V"
                       name="append"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/StringBuilder">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.CodegenImplObjectStrict$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.CodegenImplObjectStrict.DEFAULT_VALUES</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.jsoniter.spi">
         <class id="OmitValue$Null"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$Null; file: com.jsoniter.spi.OmitValue$Null-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="Decoder$FloatDecoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Decoder$FloatDecoder; file: com.jsoniter.spi.Decoder$FloatDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$FloatDecoder.decodeFloat</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Float.valueOf</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)F"
                       name="decodeFloat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>F</return>
               </method>
            </methods>
         </class>
         <class id="Config"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Config; file: com.jsoniter.spi.Config-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">configName</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/Config$Builder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">configs</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">decoderCacheKeys</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">encoderCacheKeys</attribute>
               <attribute final="true" public="false" static="true" type="Ljava/util/Map">primitiveOmitValues</attribute>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lcom/jsoniter/spi/Config">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/Config$Builder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.EmptyExtension.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">decoderCacheKeys</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">encoderCacheKeys</op>
                     <op code="put">configName</op>
                     <op code="put">builder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="configName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">configName</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="getDecoderCacheKey"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">decoderCacheKeys</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">decoderCacheKeys</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="get">configName</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">decoderCacheKeys</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">decoderCacheKeys</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="getEncoderCacheKey"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">encoderCacheKeys</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">encoderCacheKeys</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="get">configName</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">encoderCacheKeys</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">encoderCacheKeys</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/DecodingMode;"
                       name="decodingMode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/DecodingMode</return>
                  <ops>
                     <op code="get">builder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.access$000</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config$Builder;"
                       name="builder"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="get">builder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config$Builder;"
                       name="copyBuilder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="get">builder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.copy</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="indentionStep"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">builder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="omitDefaultValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">builder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="escapeUnicode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">builder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.access$300</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/output/EncodingMode;"
                       name="encodingMode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/output/EncodingMode</return>
                  <ops>
                     <op code="get">builder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.access$400</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="updateClassDescriptor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getAnnotation</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonObject.asExtraForUnknownProperties</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">asExtraForUnknownProperties</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonObject.unknownPropertiesWhitelist</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">classInfo</op>
                     <op code="get">lookup</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">name</op>
                     <op code="get">name</op>
                     <op code="put">fromNames</op>
                     <op code="put">toNames</op>
                     <op code="put">shouldSkip</op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonObject.unknownPropertiesBlacklist</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">classInfo</op>
                     <op code="get">lookup</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">name</op>
                     <op code="get">name</op>
                     <op code="put">fromNames</op>
                     <op code="put">toNames</op>
                     <op code="put">asExtraWhenPresent</op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getDeclaredMethods</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.asList</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.updateBindings</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.detectCtor</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.detectStaticFactory</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.detectWrappers</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.detectUnwrappers</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;Ljava/util/List;)V"
                       name="detectUnwrappers"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isStatic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonUnwrapper</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="get">unwrappers</op>
                     <op code="call">
                        <name>com.jsoniter.spi.UnwrapperDescriptor.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Method">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;Ljava/util/List;)V"
                       name="detectWrappers"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isStatic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonWrapper</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getParameterAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getParamNames</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.remove</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.annotation.JsonWrapperType.BINDING</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonWrapper.value</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonWrapperType.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.WrapperDescriptor.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">method</op>
                     <op code="get">classInfo</op>
                     <op code="get">lookup</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getGenericParameterTypes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonProperty</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.updateBindingWithJsonProperty</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Lcom/jsoniter/annotation/JsonProperty">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">name</op>
                     <op code="get">name</op>
                     <op code="put">fromNames</op>
                     <op code="get">name</op>
                     <op code="put">toNames</op>
                     <op code="put">annotations</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.annotation.JsonWrapperType.KEY_VALUE</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonWrapper.value</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonWrapperType.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonWrapper.value</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;I)[Ljava/lang/String;"
                       name="getParamNames"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.reflectCall</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Array.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.reflectCall</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;"
                       name="reflectCall"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getMethod</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.invoke</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;Ljava/util/List;)V"
                       name="detectStaticFactory"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isStatic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonCreator</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">staticMethodName</op>
                     <op code="get">ctor</op>
                     <op code="put">staticFactory</op>
                     <op code="get">ctor</op>
                     <op code="put">ctor</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getParameterAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getParamNames</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonProperty</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="get">classInfo</op>
                     <op code="get">lookup</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getGenericParameterTypes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.updateBindingWithJsonProperty</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Lcom/jsoniter/annotation/JsonProperty">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">name</op>
                     <op code="get">name</op>
                     <op code="put">fromNames</op>
                     <op code="get">name</op>
                     <op code="put">toNames</op>
                     <op code="put">annotations</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="detectCtor"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">ctor</op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Class.getDeclaredConstructors</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.getAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonCreator</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="put">staticMethodName</op>
                     <op code="get">ctor</op>
                     <op code="put">ctor</op>
                     <op code="get">ctor</op>
                     <op code="put">staticFactory</op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.getParameterAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getParamNames</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonProperty</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="get">classInfo</op>
                     <op code="get">lookup</op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.getGenericParameterTypes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.updateBindingWithJsonProperty</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Lcom/jsoniter/annotation/JsonProperty">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">name</op>
                     <op code="get">name</op>
                     <op code="put">fromNames</op>
                     <op code="get">name</op>
                     <op code="put">toNames</op>
                     <op code="put">annotations</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="updateBindings"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.omitDefaultValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.allBindings</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">annotations</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonIgnore</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonIgnore.ignoreDecoding</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonIgnore.ignoreEncoding</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="get">annotations</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonUnwrapper</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="put">toNames</op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.createOmitValue</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">defaultValueToOmit</op>
                     <op code="get">annotations</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getJsonProperty</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.updateBindingWithJsonProperty</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                           <arg type="Lcom/jsoniter/annotation/JsonProperty">?</arg>
                        </args>
                     </op>
                     <op code="get">annotations</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="put">onMissingProperties</op>
                     <op code="get">annotations</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="put">onExtraProperties</op>
                     <op code="get">field</op>
                     <op code="get">setters</op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="put">toNames</op>
                     <op code="get">getters</op>
                     <op code="get">getters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="put">toNames</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Binding;Lcom/jsoniter/annotation/JsonProperty;)V"
                       name="updateBindingWithJsonProperty"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                     <arg type="Lcom/jsoniter/annotation/JsonProperty">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.required</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">asMissingWhenNotPresent</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.nullable</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">isNullable</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.collectionValueNullable</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">isCollectionValueNullable</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.defaultValueToOmit</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.parse</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">defaultValueToOmit</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.value</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="put">name</op>
                     <op code="put">fromNames</op>
                     <op code="put">toNames</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.from</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.from</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.to</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.to</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.decoder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getConstructor</name>
                        <args>
                           <arg type="[Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.newInstance</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">decoder</op>
                     <op code="call">
                        <name>java.lang.Class.newInstance</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">decoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.encoder</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getConstructor</name>
                        <args>
                           <arg type="[Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.newInstance</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">encoder</op>
                     <op code="call">
                        <name>java.lang.Class.newInstance</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">encoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.implementation</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.annotation.JsonProperty.implementation</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.useImpl</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">valueType</op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">valueTypeLiteral</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/OmitValue;"
                       name="createOmitValue"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/OmitValue</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.Config.primitiveOmitValues</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Null.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonWrapper;"
                       name="getJsonWrapper"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonWrapper</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonUnwrapper;"
                       name="getJsonUnwrapper"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonUnwrapper</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonCreator;"
                       name="getJsonCreator"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonCreator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonProperty;"
                       name="getJsonProperty"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonProperty</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;)Lcom/jsoniter/annotation/JsonIgnore;"
                       name="getJsonIgnore"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                  </args>
                  <return>Lcom/jsoniter/annotation/JsonIgnore</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.getAnnotation</name>
                        <args>
                           <arg type="[Ljava/lang/annotation/Annotation">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"
                       name="getAnnotation"
                       static="true"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/annotation/Annotation">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/annotation/Annotation</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.Config.configs</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.Config.primitiveOmitValues</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.build</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.Config.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Decoder$BooleanDecoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Decoder$BooleanDecoder; file: com.jsoniter.spi.Decoder$BooleanDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$BooleanDecoder.decodeBoolean</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Boolean.valueOf</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Z"
                       name="decodeBoolean"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Z</return>
               </method>
            </methods>
         </class>
         <class id="GenericsHelper"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.GenericsHelper; file: com.jsoniter.spi.GenericsHelper-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/reflect/GenericArrayType;"
                       name="createGenericArrayType"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/GenericArrayType</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper$GenericArrayTypeImpl.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;"
                       name="createParameterizedType"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/ParameterizedType</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper$ParameterizedTypeImpl.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;Ljava/lang/Class;)Z"
                       name="isSameClass"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;"
                       name="useImpl"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getOwnerType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.createParameterizedType</name>
                        <args>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GenericsHelper$ParameterizedTypeImpl"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.GenericsHelper$ParameterizedTypeImpl; file: com.jsoniter.spi.GenericsHelper$ParameterizedTypeImpl-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="[Ljava/lang/reflect/Type">actualTypeArguments</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/reflect/Type">ownerType</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/reflect/Type">rawType</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">actualTypeArguments</op>
                     <op code="put">ownerType</op>
                     <op code="put">rawType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()[Ljava/lang/reflect/Type;"
                       name="getActualTypeArguments"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="get">actualTypeArguments</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/reflect/Type;"
                       name="getOwnerType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="get">ownerType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/reflect/Type;"
                       name="getRawType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="get">rawType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">actualTypeArguments</op>
                     <op code="get">actualTypeArguments</op>
                     <op code="call">
                        <name>java.util.Arrays.equals</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">ownerType</op>
                     <op code="get">ownerType</op>
                     <op code="get">ownerType</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">ownerType</op>
                     <op code="get">rawType</op>
                     <op code="get">rawType</op>
                     <op code="get">rawType</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">rawType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">actualTypeArguments</op>
                     <op code="call">
                        <name>java.util.Arrays.hashCode</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">ownerType</op>
                     <op code="get">ownerType</op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">rawType</op>
                     <op code="get">rawType</op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">rawType</op>
                     <op code="call">
                        <name>java.lang.Object.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">rawType</op>
                     <op code="get">rawType</op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">actualTypeArguments</op>
                     <op code="call">
                        <name>java.util.Arrays.toString</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">ownerType</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsoniterSpi$TypeProperty"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.JsoniterSpi$TypeProperty; file: com.jsoniter.spi.JsoniterSpi$TypeProperty-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Type">type</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">property</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/reflect/Type;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">type</op>
                     <op code="put">property</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">type</op>
                     <op code="get">type</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">type</op>
                     <op code="get">property</op>
                     <op code="get">property</op>
                     <op code="get">property</op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">property</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">type</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">property</op>
                     <op code="get">property</op>
                     <op code="call">
                        <name>java.lang.String.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClassDescriptor"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.ClassDescriptor; file: com.jsoniter.spi.ClassDescriptor-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/ClassInfo">classInfo</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/Class">clazz</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/Map">lookup</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/ConstructorDescriptor">ctor</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/List">fields</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/List">setters</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/List">getters</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/List">bindingTypeWrappers</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/List">keyValueTypeWrappers</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/List">unwrappers</attribute>
               <attribute final="false" public="true" static="false" type="Z">asExtraForUnknownProperties</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/Binding">onMissingProperties</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/Binding">onExtraProperties</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;Z)Lcom/jsoniter/spi/ClassDescriptor;"
                       name="getDecodingClassDescriptor"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/ClassDescriptor</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.collectTypeVariableLookup</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">classInfo</op>
                     <op code="put">clazz</op>
                     <op code="put">lookup</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getCtor</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">ctor</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getSetters</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="put">setters</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">getters</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getFields</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="put">fields</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">unwrappers</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getExtensions</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Extension.updateClassDescriptor</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">valueType</op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">valueCanReuse</op>
                     <op code="get">valueTypeLiteral</op>
                     <op code="get">nativeType</op>
                     <op code="put">valueCanReuse</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.decodingDeduplicate</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">ctor</op>
                     <op code="get">ctor</op>
                     <op code="get">ctor</op>
                     <op code="call">
                        <name>java.lang.reflect.Constructor.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">staticFactory</op>
                     <op code="get">ctor</op>
                     <op code="get">staticFactory</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.allDecoderBindings</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="get">name</op>
                     <op code="put">fromNames</op>
                     <op code="get">field</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="get">decoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.decoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">decoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassInfo;Z)Lcom/jsoniter/spi/ClassDescriptor;"
                       name="getEncodingClassDescriptor"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/ClassDescriptor</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.collectTypeVariableLookup</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">classInfo</op>
                     <op code="put">clazz</op>
                     <op code="put">lookup</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getFields</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="put">fields</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getGetters</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="put">getters</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">keyValueTypeWrappers</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">unwrappers</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getExtensions</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Extension.updateClassDescriptor</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.encodingDeduplicate</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.allEncoderBindings</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">toNames</op>
                     <op code="get">name</op>
                     <op code="put">toNames</op>
                     <op code="get">field</op>
                     <op code="get">field</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="get">encoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.encoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">encoder</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="decodingDeduplicate"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>java.util.HashMap.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Collections.reverse</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fromNames</op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.util.HashMap.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.deduplicateByFromName</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.deduplicateByFromName</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.deduplicateByFromName</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;Lcom/jsoniter/spi/Binding;)V"
                       name="deduplicateByFromName"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Lcom/jsoniter/spi/Binding">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">fromNames</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="encodingDeduplicate"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">toNames</op>
                     <op code="call">
                        <name>java.util.HashMap.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">getters</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">toNames</op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.util.HashMap.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="get">toNames</op>
                     <op code="call">
                        <name>java.util.HashMap.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Lcom/jsoniter/spi/ConstructorDescriptor;"
                       name="getCtor"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/ConstructorDescriptor</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.ConstructorDescriptor.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.canCreate</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getObjectFactory</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">objectFactory</op>
                     <op code="call">
                        <name>java.lang.Class.getDeclaredConstructor</name>
                        <args>
                           <arg type="[Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">ctor</op>
                     <op code="put">ctor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;Lcom/jsoniter/spi/ClassInfo;Z)Ljava/util/List;"
                       name="getFields"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getAllFields</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isStatic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Field.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isTransient</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.createBindingFromField</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/lang/reflect/Field">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isPublic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isPublic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;Lcom/jsoniter/spi/ClassInfo;Ljava/lang/reflect/Field;)Lcom/jsoniter/spi/Binding;"
                       name="createBindingFromField"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                     <arg type="Ljava/lang/reflect/Field">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Binding</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.reflect.Field.getGenericType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">name</op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">annotations</op>
                     <op code="put">field</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/util/List;"
                       name="getAllFields"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getDeclaredFields</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.asList</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;Lcom/jsoniter/spi/ClassInfo;Z)Ljava/util/List;"
                       name="getSetters"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getAllMethods</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isStatic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.startsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getGenericParameterTypes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getParameterTypes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isPublic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.setAccessible</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.translateSetterName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getDeclaringClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getDeclaredField</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isTransient</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">fromNames</op>
                     <op code="put">fromNames</op>
                     <op code="put">name</op>
                     <op code="put">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">annotations</op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Z)Ljava/util/List;"
                       name="getAllMethods"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Class.getMethods</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.asList</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getDeclaredMethods</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.asList</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="translateSetterName"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.startsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.toCharArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.toLowerCase</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[C">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;Lcom/jsoniter/spi/ClassInfo;Z)Ljava/util/List;"
                       name="getGetters"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.getAllMethods</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isStatic</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.startsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getGenericParameterTypes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.toCharArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.toLowerCase</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getGenericReturnType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getDeclaringClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getDeclaredField</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Field.getModifiers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Modifier.isTransient</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">toNames</op>
                     <op code="put">toNames</op>
                     <op code="put">name</op>
                     <op code="put">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">annotations</op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/util/Map;"
                       name="collectTypeVariableLookup"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getTypeParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getTypeParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.TypeVariable.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getGenericSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.collectTypeVariableLookup</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.putAll</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getGenericSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.collectTypeVariableLookup</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.putAll</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="allBindings"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get">getters</op>
                     <op code="get">getters</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="allDecoderBindings"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get">setters</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="get">ctor</op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get">bindingTypeWrappers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="allEncoderBindings"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get">getters</op>
                     <op code="call">
                        <name>java.util.ArrayList.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="encodeTos"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">fields</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.collectEncodeTo</name>
                        <args>
                           <arg type="Ljava/util/ArrayList">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                           <arg type="Ljava/util/HashMap">?</arg>
                        </args>
                     </op>
                     <op code="get">getters</op>
                     <op code="call">
                        <name>com.jsoniter.spi.ClassDescriptor.collectEncodeTo</name>
                        <args>
                           <arg type="Ljava/util/ArrayList">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                           <arg type="Ljava/util/HashMap">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/ArrayList;Ljava/util/List;Ljava/util/HashMap;)V"
                       name="collectEncodeTo"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/ArrayList">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Ljava/util/HashMap">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">toNames</op>
                     <op code="call">
                        <name>java.util.HashMap.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.set</name>
                        <args>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.EncodeTo.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">binding</op>
                     <op code="put">toName</op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClassInfo"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.ClassInfo; file: com.jsoniter.spi.ClassInfo-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Type">type</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/Class">clazz</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="[Ljava/lang/reflect/Type">typeArgs</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">type</op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">clazz</op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">typeArgs</op>
                     <op code="put">clazz</op>
                     <op code="put">typeArgs</op>
                     <op code="put">clazz</op>
                     <op code="put">typeArgs</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Decoder$IntDecoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Decoder$IntDecoder; file: com.jsoniter.spi.Decoder$IntDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$IntDecoder.decodeInt</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)I"
                       name="decodeInt"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>I</return>
               </method>
            </methods>
         </class>
         <class id="TypeLiteral"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.TypeLiteral; file: com.jsoniter.spi.TypeLiteral-->
            <attributes>
               <attribute final="false" public="true" static="true" type="Ljava/util/Map">nativeTypes</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">typeLiteralCache</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/reflect/Type">type</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">decoderCacheKey</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">encoderCacheKey</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/TypeLiteral$NativeType">nativeType</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getSuperclassTypeParameter</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="put">type</op>
                     <op code="get_static">com.jsoniter.spi.TypeLiteral.nativeTypes</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">nativeType</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.generateDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">decoderCacheKey</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.generateEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">encoderCacheKey</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/reflect/Type;Ljava/lang/String;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">type</op>
                     <op code="get_static">com.jsoniter.spi.TypeLiteral.nativeTypes</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">nativeType</op>
                     <op code="put">decoderCacheKey</op>
                     <op code="put">encoderCacheKey</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="generateDecoderCacheKey"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.generateCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="generateEncoderCacheKey"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.generateCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;Ljava/lang/String;)Ljava/lang/String;"
                       name="generateCacheKey"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAnonymousClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isArray</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.formatTypeWithoutSpecialCharacter</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.GenericArrayType.getGenericComponentType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.formatTypeWithoutSpecialCharacter</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.UnsupportedOperationException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="formatTypeWithoutSpecialCharacter"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.formatTypeWithoutSpecialCharacter</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.formatTypeWithoutSpecialCharacter</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.GenericArrayType.getGenericComponentType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.formatTypeWithoutSpecialCharacter</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/reflect/Type;"
                       name="getSuperclassTypeParameter"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Class.getGenericSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/TypeLiteral;"
                       name="create"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/TypeLiteral</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.TypeLiteral.typeLiteralCache</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.createNew</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/TypeLiteral;"
                       name="createNew"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/TypeLiteral</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.TypeLiteral.typeLiteralCache</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.TypeLiteral.typeLiteralCache</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.generateDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.generateEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.TypeLiteral.typeLiteralCache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/reflect/Type;"
                       name="getType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="get">type</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getDecoderCacheKey"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="getDecoderCacheKey"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">decoderCacheKey</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getEncoderCacheKey"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="getEncoderCacheKey"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">encoderCacheKey</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/TypeLiteral$NativeType;"
                       name="getNativeType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/TypeLiteral$NativeType</return>
                  <ops>
                     <op code="get">nativeType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">decoderCacheKey</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">encoderCacheKey</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.TypeLiteral.nativeTypes</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.TypeLiteral.typeLiteralCache</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsonException"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.JsonException; file: com.jsoniter.spi.JsonException-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.RuntimeException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.RuntimeException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Ljava/lang/Throwable;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/Throwable">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.RuntimeException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Throwable;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Throwable">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.RuntimeException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ConstructorDescriptor"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.ConstructorDescriptor; file: com.jsoniter.spi.ConstructorDescriptor-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">staticMethodName</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Constructor">ctor</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Method">staticFactory</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/Extension">objectFactory</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/List">parameters</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">parameters</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">staticMethodName</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">ctor</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">staticFactory</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">parameters</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Encoder$StringFloatEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$StringFloatEncoder; file: com.jsoniter.spi.Encoder$StringFloatEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$FloatEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(FLcom/jsoniter/output/JsonStream;)V"
                       name="encodeFloat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="F">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Encoder$IntEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$IntEncoder; file: com.jsoniter.spi.Encoder$IntEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$IntEncoder.encodeInt</name>
                        <args>
                           <arg type="ILcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(ILcom/jsoniter/output/JsonStream;)V"
                       name="encodeInt"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="OmitValue$False"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$False; file: com.jsoniter.spi.OmitValue$False-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Boolean.booleanValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="OmitValue$ZeroInt"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$ZeroInt; file: com.jsoniter.spi.OmitValue$ZeroInt-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="EncodeTo"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.EncodeTo; file: com.jsoniter.spi.EncodeTo-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/Binding">binding</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">toName</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsoniterSpi"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.JsoniterSpi; file: com.jsoniter.spi.JsoniterSpi-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Lcom/jsoniter/spi/Config">defaultConfig</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/List">extensions</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">typeImpls</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">globalMapKeyDecoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">globalMapKeyEncoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">globalTypeDecoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">globalTypeEncoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">globalPropertyDecoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">globalPropertyEncoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/lang/ThreadLocal">currentConfig</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">configNames</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">mapKeyEncoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">mapKeyDecoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">encoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">decoders</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Ljava/util/Map">objectFactories</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;)V"
                       name="setCurrentConfig"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.currentConfig</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clearCurrentConfig"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.currentConfig</op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.defaultConfig</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.set</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config;"
                       name="getCurrentConfig"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.currentConfig</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Config;)V"
                       name="setDefaultConfig"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Config">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.defaultConfig</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config;"
                       name="getDefaultConfig"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.defaultConfig</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Ljava/lang/String;"
                       name="assignConfigName"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.configNames</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.assignNewConfigName</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Ljava/lang/String;"
                       name="assignNewConfigName"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.configNames</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalSettings</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.configNames</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.configNames</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/Extension;)V"
                       name="registerExtension"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/Extension">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.extensions</op>
                     <op code="call">
                        <name>java.util.List.contains</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.extensions</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="getExtensions"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.extensions</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.currentConfig</op>
                     <op code="call">
                        <name>java.lang.ThreadLocal.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;Lcom/jsoniter/spi/Decoder;)V"
                       name="registerMapKeyDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalMapKeyDecoders</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalMapKeyDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;Lcom/jsoniter/spi/Encoder;)V"
                       name="registerMapKeyEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalMapKeyEncoders</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalMapKeyEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Ljava/lang/Class;)V"
                       name="registerTypeImplementation"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.typeImpls</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/Class;"
                       name="getTypeImplementation"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Class</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.typeImpls</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Lcom/jsoniter/spi/Decoder;)V"
                       name="registerTypeDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalTypeDecoders</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Lcom/jsoniter/spi/Decoder;)V"
                       name="registerTypeDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalTypeDecoders</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Lcom/jsoniter/spi/Encoder;)V"
                       name="registerTypeEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalTypeEncoders</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Lcom/jsoniter/spi/Encoder;)V"
                       name="registerTypeEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalTypeEncoders</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Ljava/lang/String;Lcom/jsoniter/spi/Decoder;)V"
                       name="registerPropertyDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalPropertyDecoders</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi$TypeProperty.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/JsoniterSpi$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalPropertyDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/String;Lcom/jsoniter/spi/Decoder;)V"
                       name="registerPropertyDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalPropertyDecoders</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi$TypeProperty.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/JsoniterSpi$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalPropertyDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Ljava/lang/String;Lcom/jsoniter/spi/Encoder;)V"
                       name="registerPropertyEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalPropertyEncoders</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi$TypeProperty.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/JsoniterSpi$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalPropertyEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/String;Lcom/jsoniter/spi/Encoder;)V"
                       name="registerPropertyEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalPropertyEncoders</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi$TypeProperty.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/JsoniterSpi$1">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.configName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalPropertyEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="copyGlobalSettings"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalMapKeyDecoders</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalMapKeyDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalMapKeyEncoders</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalMapKeyEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalTypeDecoders</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalTypeDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalTypeEncoders</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalTypeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalPropertyDecoders</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">property</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalPropertyDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.globalPropertyEncoders</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">property</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.copyGlobalPropertyEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;Ljava/lang/String;Lcom/jsoniter/spi/Encoder;)V"
                       name="copyGlobalPropertyEncoder"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;Ljava/lang/String;Lcom/jsoniter/spi/Decoder;)V"
                       name="copyGlobalPropertyDecoder"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;Lcom/jsoniter/spi/Encoder;)V"
                       name="copyGlobalTypeEncoder"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;Lcom/jsoniter/spi/Decoder;)V"
                       name="copyGlobalTypeDecoder"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;Lcom/jsoniter/spi/Decoder;)V"
                       name="copyGlobalMapKeyDecoder"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewMapDecoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;Lcom/jsoniter/spi/Encoder;)V"
                       name="copyGlobalMapKeyEncoder"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addNewMapEncoder</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="getMapKeyEncoderCacheKey"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/String;"
                       name="getMapKeyDecoderCacheKey"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/Decoder;)V"
                       name="addNewMapDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.mapKeyDecoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.mapKeyDecoders</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/spi/Decoder;"
                       name="getMapKeyDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.mapKeyDecoders</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/Encoder;)V"
                       name="addNewMapEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.mapKeyEncoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.mapKeyEncoders</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/spi/Encoder;"
                       name="getMapKeyEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.mapKeyEncoders</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/spi/Decoder;"
                       name="getDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.decoders</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/Decoder;)V"
                       name="addNewDecoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Decoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.decoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.remove</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.decoders</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/spi/Encoder;"
                       name="getEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.encoders</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/jsoniter/spi/Encoder;)V"
                       name="addNewEncoder"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/jsoniter/spi/Encoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.encoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.remove</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.encoders</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Z"
                       name="canCreate"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.objectFactories</op>
                     <op code="call">
                        <name>java.util.Map.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getExtensions</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Extension.canCreate</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.addObjectFactory</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Extension">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/Object;"
                       name="create"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.getObjectFactory</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Extension.create</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Lcom/jsoniter/spi/Extension;"
                       name="getObjectFactory"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Extension</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.objectFactories</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;Lcom/jsoniter/spi/Extension;)V"
                       name="addObjectFactory"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Lcom/jsoniter/spi/Extension">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.jsoniter.spi.JsoniterSpi.objectFactories</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.objectFactories</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.extensions</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.typeImpls</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.globalMapKeyDecoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.globalMapKeyEncoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.globalTypeDecoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.globalTypeEncoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.globalPropertyDecoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.globalPropertyEncoders</op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.currentConfig</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.configNames</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.mapKeyEncoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.mapKeyDecoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.encoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.decoders</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.objectFactories</op>
                     <op code="get_static">com.jsoniter.spi.Config.INSTANCE</op>
                     <op code="put_static">com.jsoniter.spi.JsoniterSpi.defaultConfig</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Decoder$ShortDecoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Decoder$ShortDecoder; file: com.jsoniter.spi.Decoder$ShortDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$ShortDecoder.decodeShort</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Short.valueOf</name>
                        <args>
                           <arg type="S">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)S"
                       name="decodeShort"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>S</return>
               </method>
            </methods>
         </class>
         <class id="GenericsHelper$GenericArrayTypeImpl"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.GenericsHelper$GenericArrayTypeImpl; file: com.jsoniter.spi.GenericsHelper$GenericArrayTypeImpl-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/reflect/Type">componentType</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">componentType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/reflect/Type;"
                       name="getGenericComponentType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="get">componentType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="get">componentType</op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">componentType</op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">componentType</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Decoder$LongDecoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Decoder$LongDecoder; file: com.jsoniter.spi.Decoder$LongDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$LongDecoder.decodeLong</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)J"
                       name="decodeLong"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>J</return>
               </method>
            </methods>
         </class>
         <class id="UnwrapperDescriptor"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.UnwrapperDescriptor; file: com.jsoniter.spi.UnwrapperDescriptor-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Method">method</attribute>
               <attribute final="false" public="true" static="false" type="Z">isMap</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/TypeLiteral">mapValueTypeLiteral</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/reflect/Method;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Method">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">method</op>
                     <op code="call">
                        <name>com.jsoniter.spi.UnwrapperDescriptor.isMapUnwrapper</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Method">?</arg>
                        </args>
                     </op>
                     <op code="put">isMap</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getGenericReturnType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">mapValueTypeLiteral</op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">mapValueTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.spi.UnwrapperDescriptor.isStreamUnwrapper</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Method">?</arg>
                        </args>
                     </op>
                     <op code="put">isMap</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Method;)Z"
                       name="isMapUnwrapper"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Method">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.reflect.Method.getParameterTypes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getReturnType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Method;)Z"
                       name="isStreamUnwrapper"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/reflect/Method">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.reflect.Method.getReturnType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Void.TYPE</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.getParameterTypes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OmitValue$ZeroLong"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$ZeroLong; file: com.jsoniter.spi.OmitValue$ZeroLong-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Long.longValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="Binding"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Binding; file: com.jsoniter.spi.Binding-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/Class">clazz</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/TypeLiteral">clazzTypeLiteral</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="[Ljava/lang/annotation/Annotation">annotations</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Field">field</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Method">method</attribute>
               <attribute final="false" public="true" static="false" type="Z">valueCanReuse</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">name</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Type">valueType</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/TypeLiteral">valueTypeLiteral</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="[Ljava/lang/String">fromNames</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="[Ljava/lang/String">toNames</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/Decoder">decoder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/Encoder">encoder</attribute>
               <attribute final="false" public="true" static="false" type="Z">asMissingWhenNotPresent</attribute>
               <attribute final="false" public="true" static="false" type="Z">asExtraWhenPresent</attribute>
               <attribute final="false" public="true" static="false" type="Z">isNullable</attribute>
               <attribute final="false" public="true" static="false" type="Z">isCollectionValueNullable</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lcom/jsoniter/spi/OmitValue">defaultValueToOmit</attribute>
               <attribute final="false" public="true" static="false" type="Z">shouldSkip</attribute>
               <attribute final="false" public="true" static="false" type="I">idx</attribute>
               <attribute final="false" public="true" static="false" type="J">mask</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/spi/ClassInfo;Ljava/util/Map;Ljava/lang/reflect/Type;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassInfo">?</arg>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">isNullable</op>
                     <op code="put">isCollectionValueNullable</op>
                     <op code="get">clazz</op>
                     <op code="put">clazz</op>
                     <op code="get">type</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">clazzTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.substituteTypeVariables</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">valueType</op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.create</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="put">valueTypeLiteral</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="decoderCacheKey"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazzTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="encoderCacheKey"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazzTypeLiteral</op>
                     <op code="call">
                        <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;"
                       name="substituteTypeVariables"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.translateTypeVariable</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/TypeVariable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getActualTypeArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.substituteTypeVariables</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getOwnerType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.ParameterizedType.getRawType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.createParameterizedType</name>
                        <args>
                           <arg type="[Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.GenericArrayType.getGenericComponentType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.substituteTypeVariables</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.GenericsHelper.createGenericArrayType</name>
                        <args>
                           <arg type="Ljava/lang/reflect/Type">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;"
                       name="translateTypeVariable"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Ljava/lang/reflect/TypeVariable">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/Type</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.reflect.TypeVariable.getGenericDeclaration</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.reflect.TypeVariable.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getCanonicalName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Binding.translateTypeVariable</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                           <arg type="Ljava/lang/reflect/TypeVariable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"
                       name="getAnnotation"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/annotation/Annotation</return>
                  <ops>
                     <op code="get">annotations</op>
                     <op code="get">annotations</op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="get">clazz</op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="get">method</op>
                     <op code="get">method</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="get">name</op>
                     <op code="get">name</op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">clazz</op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">method</op>
                     <op code="get">method</op>
                     <op code="call">
                        <name>java.lang.reflect.Method.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.String.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">clazz</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">name</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">valueType</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Encoder$DoubleEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$DoubleEncoder; file: com.jsoniter.spi.Encoder$DoubleEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$DoubleEncoder.encodeDouble</name>
                        <args>
                           <arg type="DLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(DLcom/jsoniter/output/JsonStream;)V"
                       name="encodeDouble"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="Decoder$DoubleDecoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Decoder$DoubleDecoder; file: com.jsoniter.spi.Decoder$DoubleDecoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)Ljava/lang/Object;"
                       name="decode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Decoder$DoubleDecoder.decodeDouble</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/JsonIterator;)D"
                       name="decodeDouble"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                  </args>
                  <return>D</return>
               </method>
            </methods>
         </class>
         <class id="Encoder$StringIntEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$StringIntEncoder; file: com.jsoniter.spi.Encoder$StringIntEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$IntEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(ILcom/jsoniter/output/JsonStream;)V"
                       name="encodeInt"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Encoder$FloatEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$FloatEncoder; file: com.jsoniter.spi.Encoder$FloatEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Float.floatValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$FloatEncoder.encodeFloat</name>
                        <args>
                           <arg type="FLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Float.floatValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(FLcom/jsoniter/output/JsonStream;)V"
                       name="encodeFloat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="F">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="Encoder$StringLongEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$StringLongEncoder; file: com.jsoniter.spi.Encoder$StringLongEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$LongEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(JLcom/jsoniter/output/JsonStream;)V"
                       name="encodeLong"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OmitValue$ZeroFloat"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$ZeroFloat; file: com.jsoniter.spi.OmitValue$ZeroFloat-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Float.floatValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="EmptyExtension"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.EmptyExtension; file: com.jsoniter.spi.EmptyExtension-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;"
                       name="chooseImplementation"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Ljava/lang/reflect/Type</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Z"
                       name="canCreate"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Z</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/Object;"
                       name="create"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.UnsupportedOperationException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Decoder;"
                       name="createDecoder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Decoder</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/reflect/Type;)Lcom/jsoniter/spi/Encoder;"
                       name="createEncoder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Encoder</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/ClassDescriptor;)V"
                       name="updateClassDescriptor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/ClassDescriptor">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="Encoder$StringShortEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$StringShortEncoder; file: com.jsoniter.spi.Encoder$StringShortEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$ShortEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(SLcom/jsoniter/output/JsonStream;)V"
                       name="encodeShort"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="S">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="S">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OmitValue$ZeroDouble"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$ZeroDouble; file: com.jsoniter.spi.OmitValue$ZeroDouble-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="WrapperDescriptor"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.WrapperDescriptor; file: com.jsoniter.spi.WrapperDescriptor-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/util/List">parameters</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Ljava/lang/reflect/Method">method</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">parameters</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OmitValue$ZeroShort"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$ZeroShort; file: com.jsoniter.spi.OmitValue$ZeroShort-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Short.shortValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="Config$Builder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Config$Builder; file: com.jsoniter.spi.Config$Builder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/DecodingMode">decodingMode</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/output/EncodingMode">encodingMode</attribute>
               <attribute final="false" public="false" static="false" type="I">indentionStep</attribute>
               <attribute final="false" public="false" static="false" type="Z">escapeUnicode</attribute>
               <attribute final="false" public="false" static="false" type="Z">omitDefaultValue</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">escapeUnicode</op>
                     <op code="put">omitDefaultValue</op>
                     <op code="call">
                        <name>java.lang.System.getenv</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.DecodingMode.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">decodingMode</op>
                     <op code="get_static">com.jsoniter.spi.DecodingMode.REFLECTION_MODE</op>
                     <op code="put">decodingMode</op>
                     <op code="call">
                        <name>java.lang.System.getenv</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.EncodingMode.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">encodingMode</op>
                     <op code="get_static">com.jsoniter.output.EncodingMode.REFLECTION_MODE</op>
                     <op code="put">encodingMode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/DecodingMode;)Lcom/jsoniter/spi/Config$Builder;"
                       name="decodingMode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/DecodingMode">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="put">decodingMode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/EncodingMode;)Lcom/jsoniter/spi/Config$Builder;"
                       name="encodingMode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/EncodingMode">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="put">encodingMode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/spi/Config$Builder;"
                       name="indentionStep"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="put">indentionStep</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)Lcom/jsoniter/spi/Config$Builder;"
                       name="omitDefaultValue"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="put">omitDefaultValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)Lcom/jsoniter/spi/Config$Builder;"
                       name="escapeUnicode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="put">escapeUnicode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.JsoniterSpi.assignConfigName</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.access$500</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.access$500</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.doBuild</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.access$500</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.access$502</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/spi/Config;"
                       name="doBuild"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Config</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/jsoniter/spi/Config$Builder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">indentionStep</op>
                     <op code="get">indentionStep</op>
                     <op code="get">escapeUnicode</op>
                     <op code="get">escapeUnicode</op>
                     <op code="get">decodingMode</op>
                     <op code="get">decodingMode</op>
                     <op code="get">omitDefaultValue</op>
                     <op code="get">omitDefaultValue</op>
                     <op code="get">encodingMode</op>
                     <op code="get">encodingMode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">decodingMode</op>
                     <op code="get">decodingMode</op>
                     <op code="call">
                        <name>com.jsoniter.spi.DecodingMode.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">encodingMode</op>
                     <op code="get">encodingMode</op>
                     <op code="call">
                        <name>com.jsoniter.output.EncodingMode.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">indentionStep</op>
                     <op code="get">escapeUnicode</op>
                     <op code="get">omitDefaultValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/spi/Config$Builder;"
                       name="copy"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/spi/Config$Builder</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Config$Builder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">encodingMode</op>
                     <op code="put">encodingMode</op>
                     <op code="get">decodingMode</op>
                     <op code="put">decodingMode</op>
                     <op code="get">indentionStep</op>
                     <op code="put">indentionStep</op>
                     <op code="get">escapeUnicode</op>
                     <op code="put">escapeUnicode</op>
                     <op code="get">omitDefaultValue</op>
                     <op code="put">omitDefaultValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">decodingMode</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">encodingMode</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">indentionStep</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">escapeUnicode</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">omitDefaultValue</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Encoder$StringDoubleEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$StringDoubleEncoder; file: com.jsoniter.spi.Encoder$StringDoubleEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$DoubleEncoder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(DLcom/jsoniter/output/JsonStream;)V"
                       name="encodeDouble"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Slice"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Slice; file: com.jsoniter.spi.Slice-->
            <attributes>
               <attribute final="false" public="false" static="false" type="[B">data</attribute>
               <attribute final="false" public="false" static="false" type="I">head</attribute>
               <attribute final="false" public="false" static="false" type="I">tail</attribute>
               <attribute final="false" public="false" static="false" type="I">hash</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([BII)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">data</op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">data</op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                     <op code="put">hash</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)B"
                       name="at"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>B</return>
                  <ops>
                     <op code="get">data</op>
                     <op code="get">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="len"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()[B"
                       name="data"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>B</return>
                  <ops>
                     <op code="get">data</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="head"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">head</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="tail"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">tail</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/spi/Slice;"
                       name="make"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/Slice</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.getBytes</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Slice.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">data</op>
                     <op code="get">data</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">hash</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">hash</op>
                     <op code="get">data</op>
                     <op code="put">hash</op>
                     <op code="get">hash</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">data</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Encoder$LongEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$LongEncoder; file: com.jsoniter.spi.Encoder$LongEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Long.longValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$LongEncoder.encodeLong</name>
                        <args>
                           <arg type="JLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Long.longValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(JLcom/jsoniter/output/JsonStream;)V"
                       name="encodeLong"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="OmitValue$ZeroByte"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$ZeroByte; file: com.jsoniter.spi.OmitValue$ZeroByte-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Byte.byteValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="Encoder$BooleanEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$BooleanEncoder; file: com.jsoniter.spi.Encoder$BooleanEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Boolean.booleanValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$BooleanEncoder.encodeBoolean</name>
                        <args>
                           <arg type="ZLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(ZLcom/jsoniter/output/JsonStream;)V"
                       name="encodeBoolean"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="Encoder$ShortEncoder"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.Encoder$ShortEncoder; file: com.jsoniter.spi.Encoder$ShortEncoder-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Lcom/jsoniter/output/JsonStream;)V"
                       name="encode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Short.shortValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.Encoder$ShortEncoder.encodeShort</name>
                        <args>
                           <arg type="SLcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Short.shortValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(SLcom/jsoniter/output/JsonStream;)V"
                       name="encodeShort"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="S">?</arg>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="OmitValue$Parsed"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$Parsed; file: com.jsoniter.spi.OmitValue$Parsed-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/Object">defaultValue</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">code</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Object;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">defaultValue</op>
                     <op code="put">code</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/reflect/Type;Ljava/lang/String;)Lcom/jsoniter/spi/OmitValue;"
                       name="parse"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/reflect/Type">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/OmitValue</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Null.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Boolean.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Boolean.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Boolean.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Integer.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Byte.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Byte.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Byte.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Short.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Short.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Short.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Long.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Float.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Float.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Float.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Double.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Character.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.valueOf</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.valueOf</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.OmitValue$Parsed.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.UnsupportedOperationException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">defaultValue</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">code</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OmitValue$ZeroChar"><!--Package: com.jsoniter.spi; name: com.jsoniter.spi.OmitValue$ZeroChar; file: com.jsoniter.spi.OmitValue$ZeroChar-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="shouldOmit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Character.charValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="code"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.jsoniter.any">
         <class id="ObjectLazyAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ObjectLazyAny; file: com.jsoniter.any.ObjectLazyAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lcom/jsoniter/spi/TypeLiteral">typeLiteral</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">cache</attribute>
               <attribute final="false" public="false" static="false" type="I">lastParsedPos</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([BII)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">lastParsedPos</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.OBJECT</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Set;"
                       name="keys"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Set</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.keySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.fillCacheUntil</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.isWildcard</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.valueType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.rewrap</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.fillCacheUntil</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="fillCacheUntil"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">data</op>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get">lastParsedPos</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.head</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.head</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fillCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">data</op>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get">lastParsedPos</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any$EntryIterator;"
                       name="entries"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any$EntryIterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny$LazyIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.writeTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.any.ObjectLazyAny.typeLiteral</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.ObjectLazyAny.typeLiteral</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LongAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.LongAny; file: com.jsoniter.any.LongAny-->
            <attributes>
               <attribute final="false" public="false" static="false" type="J">val</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(J)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.String.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NullAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.NullAny; file: com.jsoniter.any.NullAny-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lcom/jsoniter/any/NullAny">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.NULL</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get_static">java.math.BigInteger.ZERO</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get_static">java.math.BigDecimal.ZERO</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeNull</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.NullAny.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.NullAny.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ListWrapperAny$WrapperIterator"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ListWrapperAny$WrapperIterator; file: com.jsoniter.any.ListWrapperAny$WrapperIterator-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">index</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/any/ListWrapperAny">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/any/ListWrapperAny;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasNext"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">index</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="next"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.access$202</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="get">index</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">index</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">index</op>
                     <op code="put">index</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="remove"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.UnsupportedOperationException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObjectAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ObjectAny; file: com.jsoniter.any.ObjectAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">val</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/Map;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.OBJECT</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectStart</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectField</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.writeTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeObjectEnd</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.isWildcard</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.valueType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.rewrap</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any$EntryIterator;"
                       name="entries"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any$EntryIterator</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny$IteratorAdapter.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Iterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LongLazyAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.LongLazyAny; file: com.jsoniter.any.LongLazyAny-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">isCached</attribute>
               <attribute final="false" public="false" static="false" type="J">cache</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([BII)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fillCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">isCached</op>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readLong</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">isCached</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ListWrapperAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ListWrapperAny; file: com.jsoniter.any.ListWrapperAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/List">val</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">cache</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.ARRAY</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.fillCacheUntil</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.isWildcard</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.valueType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.rewrap</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.fillCacheUntil</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Iterator;"
                       name="iterator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Iterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny$WrapperIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny">?</arg>
                           <arg type="Lcom/jsoniter/any/ListWrapperAny$1">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fillCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="fillCacheUntil"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StringLazyAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.StringLazyAny; file: com.jsoniter.any.StringLazyAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">FALSE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">cache</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([BII)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.STRING</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readInt</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readLong</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readFloat</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readDouble</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fillCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObjectLazyAny$LazyIterator"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ObjectLazyAny$LazyIterator; file: com.jsoniter.any.ObjectLazyAny$LazyIterator-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Iterator">mapIter</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">key</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/any/Any">value</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/any/ObjectLazyAny">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/any/ObjectLazyAny;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$000</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$002</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$000</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">mapIter</op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                        </args>
                     </op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">data</op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$102</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.head</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$102</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="next"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">tail</op>
                     <op code="get">mapIter</op>
                     <op code="get">mapIter</op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">mapIter</op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">key</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">value</op>
                     <op code="put">mapIter</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">data</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readObjectFieldAsString</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">key</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">value</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$000</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                        </args>
                     </op>
                     <op code="get">key</op>
                     <op code="get">value</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.head</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$102</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.access$102</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ObjectLazyAny">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="key"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">key</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="value"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">value</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TrueAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.TrueAny; file: com.jsoniter.any.TrueAny-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lcom/jsoniter/any/TrueAny">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.BOOLEAN</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get_static">java.math.BigInteger.ONE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get_static">java.math.BigDecimal.ONE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeTrue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.TrueAny.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.TrueAny.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StringAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.StringAny; file: com.jsoniter.any.StringAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">FALSE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">val</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.STRING</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.String.length</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.String.charAt</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Long.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Long.longValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Float.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Float.floatValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Double.doubleValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigInteger.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigDecimal.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObjectAny$IteratorAdapter"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ObjectAny$IteratorAdapter; file: com.jsoniter.any.ObjectAny$IteratorAdapter-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Iterator">iter</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map$Entry">entry</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/Iterator;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Iterator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">iter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="next"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">iter</op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">iter</op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">entry</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="key"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">entry</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="value"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">entry</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NotFoundAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.NotFoundAny; file: com.jsoniter.any.NotFoundAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/spi/JsonException">exception</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([Ljava/lang/Object;ILjava/lang/Object;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.toString</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">exception</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(ILjava/lang/Object;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">exception</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Object;Ljava/lang/Object;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="put">exception</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">exception</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">exception</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get_static">java.math.BigInteger.ZERO</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get_static">java.math.BigDecimal.ZERO</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="MapWrapperAny$WrapperIterator"><!--Package: com.jsoniter.any; name: com.jsoniter.any.MapWrapperAny$WrapperIterator; file: com.jsoniter.any.MapWrapperAny$WrapperIterator-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Iterator">iter</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">key</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/any/Any">value</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/any/MapWrapperAny">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/any/MapWrapperAny;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/any/MapWrapperAny">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/MapWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">iter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="next"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/MapWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.access$202</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/MapWrapperAny">?</arg>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="get">iter</op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">iter</op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">key</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/MapWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">key</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">value</op>
                     <op code="get">value</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">value</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/MapWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">key</op>
                     <op code="get">value</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="key"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">key</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="value"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">value</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LazyAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.LazyAny; file: com.jsoniter.any.LazyAny-->
            <attributes>
               <attribute final="true" public="false" static="false" type="[B">data</attribute>
               <attribute final="true" public="false" static="false" type="I">head</attribute>
               <attribute final="true" public="false" static="false" type="I">tail</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([BII)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">data</op>
                     <op code="put">head</op>
                     <op code="put">tail</op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Ljava/lang/Object;"
                       name="bindTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;)Ljava/lang/Object;"
                       name="bindTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/Object;"
                       name="as"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;)Ljava/lang/Object;"
                       name="as"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.read</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">data</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.trim</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/JsonIterator;"
                       name="parse"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lcom/jsoniter/JsonIterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">data</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">data</op>
                     <op code="get">head</op>
                     <op code="get">tail</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.write</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MapWrapperAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.MapWrapperAny; file: com.jsoniter.any.MapWrapperAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">val</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">cache</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/Map;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.OBJECT</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.fillCacheUntil</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.isWildcard</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.valueType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.rewrap</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.fillCacheUntil</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any$EntryIterator;"
                       name="entries"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any$EntryIterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny$WrapperIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/MapWrapperAny">?</arg>
                           <arg type="Lcom/jsoniter/any/MapWrapperAny$1">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="fillCacheUntil"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fillCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.Map.entrySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getKey</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.containsKey</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Map$Entry.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Any"><!--Package: com.jsoniter.any; name: com.jsoniter.any.Any; file: com.jsoniter.any.Any-->
            <attributes>
               <attribute final="true" public="false" static="true" type="Ljava/util/Set">EMPTY_KEYS</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lcom/jsoniter/any/Any$EntryIterator">EMPTY_ENTRIES_ITERATOR</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/util/Iterator">EMPTY_ITERATOR</attribute>
               <attribute final="true" public="false" static="true" type="I">wildcardHashCode</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/Character">wildcard</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="registerEncoders"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.registerNativeEncoder</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/jsoniter/spi/Encoder$ReflectionEncoder">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrapArray"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;"
                       name="bindTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.bindTo</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Ljava/lang/Object;"
                       name="bindTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;"
                       name="bindTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.bindTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;Ljava/lang/Object;)Ljava/lang/Object;"
                       name="bindTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Map;"
                       name="asMap"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="asList"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;"
                       name="as"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.as</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Class;)Ljava/lang/Object;"
                       name="as"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Class">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;[Ljava/lang/Object;)Ljava/lang/Object;"
                       name="as"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.as</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/spi/TypeLiteral;)Ljava/lang/Object;"
                       name="as"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.toBoolean</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.toInt</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.toLong</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.toFloat</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.toDouble</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.toBigInteger</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.toBigDecimal</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="mustBeValid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">exception</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Set;"
                       name="keys"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Set</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.Any.EMPTY_KEYS</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Iterator;"
                       name="iterator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Iterator</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.Any.EMPTY_ITERATOR</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any$EntryIterator;"
                       name="entries"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any$EntryIterator</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.Any.EMPTY_ENTRIES_ITERATOR</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(F)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="F">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/ValueType;)Lcom/jsoniter/spi/JsonException;"
                       name="reportUnexpectedType"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/jsoniter/ValueType">?</arg>
                  </args>
                  <return>Lcom/jsoniter/spi/JsonException</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.valueType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)Lcom/jsoniter/any/Any;"
                       name="lazyString"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.StringLazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)Lcom/jsoniter/any/Any;"
                       name="lazyDouble"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)Lcom/jsoniter/any/Any;"
                       name="lazyLong"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongLazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)Lcom/jsoniter/any/Any;"
                       name="lazyArray"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([BII)Lcom/jsoniter/any/Any;"
                       name="lazyObject"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectLazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.IntAny.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LongAny.&lt;init&gt;</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(F)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="F">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.FloatAny.&lt;init&gt;</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleAny.&lt;init&gt;</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.TrueAny.INSTANCE</op>
                     <op code="get_static">com.jsoniter.any.FalseAny.INSTANCE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.NullAny.INSTANCE</op>
                     <op code="call">
                        <name>com.jsoniter.any.StringAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Collection;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.NullAny.INSTANCE</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.NullAny.INSTANCE</op>
                     <op code="call">
                        <name>com.jsoniter.any.ListWrapperAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.NullAny.INSTANCE</op>
                     <op code="call">
                        <name>com.jsoniter.any.MapWrapperAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lcom/jsoniter/any/Any;"
                       name="wrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.CodegenAccess.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="wrapNull"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.NullAny.INSTANCE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;)Lcom/jsoniter/any/Any;"
                       name="rewrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)Lcom/jsoniter/any/Any;"
                       name="rewrap"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ObjectAny.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Map">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="isWildcard"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get_static">com.jsoniter.any.Any.wildcardHashCode</op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.any.Any.wildcard</op>
                     <op code="call">
                        <name>java.lang.Character.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.registerEncoders</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashSet.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Collections.unmodifiableSet</name>
                        <args>
                           <arg type="Ljava/util/Set">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.Any.EMPTY_KEYS</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any$2.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.Any.EMPTY_ENTRIES_ITERATOR</op>
                     <op code="call">
                        <name>com.jsoniter.any.Any$3.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.Any.EMPTY_ITERATOR</op>
                     <op code="call">
                        <name>java.lang.Character.valueOf</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Character.hashCode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.Any.wildcardHashCode</op>
                     <op code="call">
                        <name>java.lang.Character.valueOf</name>
                        <args>
                           <arg type="C">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.Any.wildcard</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ArrayLazyAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ArrayLazyAny; file: com.jsoniter.any.ArrayLazyAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lcom/jsoniter/spi/TypeLiteral">typeLiteral</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">cache</attribute>
               <attribute final="false" public="false" static="false" type="I">lastParsedPos</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([BII)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="put">lastParsedPos</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.ARRAY</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readArrayStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Iterator;"
                       name="iterator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Iterator</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny$LazyIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayLazyAny">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.fillCacheUntil</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.isWildcard</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.valueType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.rewrap</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.fillCacheUntil</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fillCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">data</op>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get">lastParsedPos</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readArrayStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="fillCacheUntil"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">data</op>
                     <op code="get">lastParsedPos</op>
                     <op code="get">tail</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.reset</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                     <op code="get">lastParsedPos</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.readArrayStart</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>java.lang.IndexOutOfBoundsException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.head</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.nextToken</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readAny</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.CodegenAccess.head</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="get">tail</op>
                     <op code="put">lastParsedPos</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.IndexOutOfBoundsException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.writeTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.any.ArrayLazyAny.typeLiteral</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Lcom/jsoniter/spi/TypeLiteral">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">lastParsedPos</op>
                     <op code="get">head</op>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny$1.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.ArrayLazyAny.typeLiteral</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ArrayAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ArrayAny; file: com.jsoniter.any.ArrayAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/List">val</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.ARRAY</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayStart</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayEnd</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.writeTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeMore</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.writeTo</name>
                        <args>
                           <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeArrayEnd</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Iterator;"
                       name="iterator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Iterator</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayAny.isWildcard</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.valueType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.rewrap</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ArrayLazyAny$LazyIterator"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ArrayLazyAny$LazyIterator; file: com.jsoniter.any.ArrayLazyAny$LazyIterator-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/any/Any">next</attribute>
               <attribute final="false" public="false" static="false" type="I">index</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/any/ArrayLazyAny">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/any/ArrayLazyAny;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/any/ArrayLazyAny">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">index</op>
                     <op code="get">index</op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.access$000</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayLazyAny">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">next</op>
                     <op code="put">next</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="remove"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.UnsupportedOperationException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasNext"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">next</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="next"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">next</op>
                     <op code="call">
                        <name>java.lang.IndexOutOfBoundsException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">next</op>
                     <op code="get">index</op>
                     <op code="put">index</op>
                     <op code="get">this$0</op>
                     <op code="get">index</op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayLazyAny.access$000</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayLazyAny">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="put">next</op>
                     <op code="put">next</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ArrayWrapperAny$WrapperIterator"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ArrayWrapperAny$WrapperIterator; file: com.jsoniter.any.ArrayWrapperAny$WrapperIterator-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">index</attribute>
               <attribute final="true" public="false" static="false" type="I">size</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/jsoniter/any/ArrayWrapperAny">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/jsoniter/any/ArrayWrapperAny;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/jsoniter/any/ArrayWrapperAny">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">size</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasNext"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">index</op>
                     <op code="get">size</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/any/Any;"
                       name="next"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.access$102</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayWrapperAny">?</arg>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="get">index</op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.access$200</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">index</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">this$0</op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.access$100</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayWrapperAny">?</arg>
                        </args>
                     </op>
                     <op code="get">index</op>
                     <op code="put">index</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="remove"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.UnsupportedOperationException.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DoubleAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.DoubleAny; file: com.jsoniter.any.DoubleAny-->
            <attributes>
               <attribute final="false" public="false" static="false" type="D">val</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(D)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.String.valueOf</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ArrayWrapperAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.ArrayWrapperAny; file: com.jsoniter.any.ArrayWrapperAny-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/Object">val</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">cache</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Object;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.ARRAY</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.serialize</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.getLength</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.fillCacheUntil</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/Object;I)Lcom/jsoniter/any/Any;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.isWildcard</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.valueType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.jsoniter.ValueType.INVALID</op>
                     <op code="call">
                        <name>java.util.ArrayList.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.rewrap</name>
                        <args>
                           <arg type="Ljava/util/List">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.intValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.fillCacheUntil</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.get</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.object</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Iterator;"
                       name="iterator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Iterator</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny$WrapperIterator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/jsoniter/any/ArrayWrapperAny">?</arg>
                           <arg type="Lcom/jsoniter/any/ArrayWrapperAny$1">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="fillCacheUntil"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.any.NotFoundAny.&lt;init&gt;</name>
                        <args>
                           <arg type="ILjava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fillCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="call">
                        <name>com.jsoniter.any.ArrayWrapperAny.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.reflect.Array.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.any.Any.wrap</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DoubleLazyAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.DoubleLazyAny; file: com.jsoniter.any.DoubleLazyAny-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">isCached</attribute>
               <attribute final="false" public="false" static="false" type="D">cache</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([BII)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="B">?</arg>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.LazyAny.&lt;init&gt;</name>
                        <args>
                           <arg type="[BII">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                     <op code="call">
                        <name>java.lang.Double.valueOf</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.fillCache</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">cache</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigInteger.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.math.BigDecimal.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fillCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">isCached</op>
                     <op code="call">
                        <name>com.jsoniter.any.DoubleLazyAny.parse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIterator.readDouble</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">cache</op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.spi.JsonException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.jsoniter.JsonIteratorPool.returnJsonIterator</name>
                        <args>
                           <arg type="Lcom/jsoniter/JsonIterator">?</arg>
                        </args>
                     </op>
                     <op code="put">isCached</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FalseAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.FalseAny; file: com.jsoniter.any.FalseAny-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lcom/jsoniter/any/FalseAny">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.BOOLEAN</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get_static">java.math.BigInteger.ZERO</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get_static">java.math.BigDecimal.ZERO</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeFalse</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.FalseAny.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.jsoniter.any.FalseAny.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FloatAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.FloatAny; file: com.jsoniter.any.FloatAny-->
            <attributes>
               <attribute final="false" public="false" static="false" type="F">val</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(F)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="F">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Float.valueOf</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="D">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.String.valueOf</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(F)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="F">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="F">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IntAny"><!--Package: com.jsoniter.any; name: com.jsoniter.any.IntAny; file: com.jsoniter.any.IntAny-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">val</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(I)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.jsoniter.any.Any.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lcom/jsoniter/ValueType;"
                       name="valueType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lcom/jsoniter/ValueType</return>
                  <ops>
                     <op code="get_static">com.jsoniter.ValueType.NUMBER</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="object"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="toBoolean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="toInt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="toLong"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()F"
                       name="toFloat"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>F</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="toDouble"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigInteger;"
                       name="toBigInteger"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigInteger</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigInteger.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/math/BigDecimal;"
                       name="toBigDecimal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/math/BigDecimal</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.math.BigDecimal.valueOf</name>
                        <args>
                           <arg type="J">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>java.lang.String.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lcom/jsoniter/any/Any;"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lcom/jsoniter/any/Any</return>
                  <ops>
                     <op code="put">val</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/jsoniter/output/JsonStream;)V"
                       name="writeTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/jsoniter/output/JsonStream">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">val</op>
                     <op code="call">
                        <name>com.jsoniter.output.JsonStream.writeVal</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
   </app>
</skeleton>
