<?xml version="1.0" encoding="UTF-8"?>
<skeleton date="2021-07-08T05:21:51.405889900Z"
          schema="xsd/skeleton.xsd"
          version="1.0-SNAPSHOT">
   <app id="D:\Projects\HuaweiLab\jpeek\..\TestClasses\TestClasses">
      <package id="">
         <class id="ImmutableNode"><!--Package: null; name: ImmutableNode; file: ImmutableNode-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Number">value</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="LImmutableNode">parent</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Collection">children</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Number;LImmutableNode;Ljava/util/function/Function;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Number">?</arg>
                     <arg type="LImmutableNode">?</arg>
                     <arg type="Ljava/util/function/Function">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">value</op>
                     <op code="put">parent</op>
                     <op code="call">
                        <name>java.util.function.Function.apply</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()LNode;"
                       name="getParent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>LNode</return>
                  <ops>
                     <op code="get">parent</op>
                     <op code="get">parent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Collection;"
                       name="getChildren"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Collection</return>
                  <ops>
                     <op code="get">children</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="print"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="get">value</op>
                     <op code="call">
                        <name>java.io.PrintStream.print</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Number;"
                       name="getValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Number</return>
                  <ops>
                     <op code="get">value</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(LMutableNode;)V"
                       name="removeChild"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="LMutableNode">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="MutableTree"><!--Package: null; name: MutableTree; file: MutableTree-->
            <attributes>
               <attribute final="false" public="false" static="false" type="LMutableTree">tree</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>AbstractTree.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>MutableTree.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">tree</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getSize"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">tree</op>
                     <op code="call">
                        <name>MutableTree.getSize</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Number;"
                       name="getSum"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Number</return>
                  <ops>
                     <op code="get">tree</op>
                     <op code="call">
                        <name>MutableTree.getSum</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(LNode;)LAbstractTree;"
                       name="removeSubtree"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="LNode">?</arg>
                  </args>
                  <return>LAbstractTree</return>
                  <ops>
                     <op code="call">
                        <name>Node.getParent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>Node.removeChild</name>
                        <args>
                           <arg type="LMutableNode">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)LAbstractTree;"
                       name="maximize"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>LAbstractTree</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()LAbstractTree;"
                       name="maximize"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>LAbstractTree</return>
               </method>
            </methods>
         </class>
         <class id="MutableNode"><!--Package: null; name: MutableNode; file: MutableNode-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Number">value</attribute>
               <attribute final="false" public="false" static="false" type="LMutableNode">parent</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Collection">children</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Number;)V"
                       name="setValue"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/Number">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">value</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(LMutableNode;)V"
                       name="setParent"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="LMutableNode">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">parent</op>
                     <op code="get">children</op>
                     <op code="call">
                        <name>java.util.Collection.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(LMutableNode;)V"
                       name="addChild"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="LMutableNode">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">children</op>
                     <op code="call">
                        <name>java.util.LinkedList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">children</op>
                     <op code="get">children</op>
                     <op code="call">
                        <name>java.util.Collection.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get">children</op>
                     <op code="call">
                        <name>java.util.Collection.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(LMutableNode;)V"
                       name="removeChild"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="LMutableNode">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">children</op>
                     <op code="get">children</op>
                     <op code="call">
                        <name>java.util.Collection.remove</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Number;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Number">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">value</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()LNode;"
                       name="getParent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>LNode</return>
                  <ops>
                     <op code="get">parent</op>
                     <op code="get">parent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Collection;"
                       name="getChildren"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Collection</return>
                  <ops>
                     <op code="get">children</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="print"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="get">value</op>
                     <op code="call">
                        <name>java.io.PrintStream.print</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Number;"
                       name="getValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Number</return>
                  <ops>
                     <op code="get">value</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AbstractTree"><!--Package: null; name: AbstractTree; file: AbstractTree-->
            <attributes>
               <attribute final="false" public="false" static="false" type="LNode">root</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/BinaryOperator">adder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Number">sum</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Comparable">comparator</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Number">zero</attribute>
               <attribute final="false" public="false" static="false" type="I">size</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">size</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()LNode;"
                       name="getRoot"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>LNode</return>
                  <ops>
                     <op code="get">root</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getSize"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">root</op>
                     <op code="call">
                        <name>AbstractTree.throughTree</name>
                        <args>
                           <arg type="LNode">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(LNode;)I"
                       name="throughTree"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="LNode">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">
                        <name>Node.getChildren</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Collection.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">size</op>
                     <op code="put">size</op>
                     <op code="call">
                        <name>Node.getChildren</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>AbstractTree.throughTree</name>
                        <args>
                           <arg type="LNode">?</arg>
                        </args>
                     </op>
                     <op code="get">size</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Number;"
                       name="getSum"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Number</return>
                  <ops>
                     <op code="get">root</op>
                     <op code="get">zero</op>
                     <op code="call">
                        <name>java.util.LinkedList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">adder</op>
                     <op code="call">
                        <name>Node.getValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.function.BinaryOperator.apply</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>Node.getChildren</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Queue.addAll</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Queue.poll</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(LNode;)LAbstractTree;"
                       name="removeSubtree"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="LNode">?</arg>
                  </args>
                  <return>LAbstractTree</return>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(I)LAbstractTree;"
                       name="maximize"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>LAbstractTree</return>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()LAbstractTree;"
                       name="maximize"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>LAbstractTree</return>
               </method>
            </methods>
         </class>
         <class id="ImmutableTree"><!--Package: null; name: ImmutableTree; file: ImmutableTree-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="LImmutableTree">tree</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>AbstractTree.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>ImmutableTree.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">tree</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getSize"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">tree</op>
                     <op code="call">
                        <name>ImmutableTree.getSize</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Number;"
                       name="getSum"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Number</return>
                  <ops>
                     <op code="get">tree</op>
                     <op code="call">
                        <name>ImmutableTree.getSum</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(LNode;)LAbstractTree;"
                       name="removeSubtree"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="LNode">?</arg>
                  </args>
                  <return>LAbstractTree</return>
                  <ops>
                     <op code="call">
                        <name>Node.getParent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>Node.removeChild</name>
                        <args>
                           <arg type="LMutableNode">?</arg>
                        </args>
                     </op>
                     <op code="put">tree</op>
                     <op code="get">tree</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)LAbstractTree;"
                       name="maximize"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>LAbstractTree</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()LAbstractTree;"
                       name="maximize"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>LAbstractTree</return>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.github.javaparser.generator.core.utils">
         <class id="CodeUtils"><!--Package: com.github.javaparser.generator.core.utils; name: com.github.javaparser.generator.core.utils.CodeUtils; file: com.github.javaparser.generator.core.utils.CodeUtils-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lcom/github/javaparser/ast/type/Type;Ljava/lang/String;)Ljava/lang/String;"
                       name="castValue"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/github/javaparser/ast/type/Type">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.type.Type.asString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.github.javaparser.generator.core.other">
         <class id="TokenKindGenerator"><!--Package: com.github.javaparser.generator.core.other; name: com.github.javaparser.generator.core.other.TokenKindGenerator; file: com.github.javaparser.generator.core.other.TokenKindGenerator-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/github/javaparser/utils/SourceRoot">generatedJavaCcSourceRoot</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="put">generatedJavaCcSourceRoot</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="generate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.utils.Log.info</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="get">sourceRoot</op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.parse</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.getClassByName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.orElseThrow</name>
                        <args>
                           <arg type="Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.findFirst</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.orElseThrow</name>
                        <args>
                           <arg type="Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumDeclaration.getEntries</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.TokenKindGenerator.annotateGenerated</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumDeclaration.findFirst</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.orElseThrow</name>
                        <args>
                           <arg type="Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.SwitchStmt.findAll</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.stream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="get">generatedJavaCcSourceRoot</op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.parse</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.getInterfaceByName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.orElseThrow</name>
                        <args>
                           <arg type="Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMembers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.BodyDeclaration.toFieldDeclaration</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.map</name>
                        <args>
                           <arg type="Ljava/util/function/Function">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.ifPresent</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/stmt/SwitchStmt;Ljava/lang/String;Lcom/github/javaparser/ast/expr/IntegerLiteralExpr;)V"
                       name="generateValueOfEntry"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/stmt/SwitchStmt">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/github/javaparser/ast/expr/IntegerLiteralExpr">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.&lt;init&gt;</name>
                        <args>
                           <arg type="[Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.ast.stmt.SwitchEntry$Type.STATEMENT_GROUP</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.ReturnStmt.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.&lt;init&gt;</name>
                        <args>
                           <arg type="[Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.SwitchEntry.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/NodeList">?</arg>
                           <arg type="Lcom/github/javaparser/ast/stmt/SwitchEntry$Type">?</arg>
                           <arg type="Lcom/github/javaparser/ast/NodeList">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.SwitchStmt.getEntries</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.addFirst</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/body/EnumDeclaration;Ljava/lang/String;Lcom/github/javaparser/ast/expr/IntegerLiteralExpr;)V"
                       name="generateEnumEntry"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/body/EnumDeclaration">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lcom/github/javaparser/ast/expr/IntegerLiteralExpr">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumConstantDeclaration.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumConstantDeclaration.getArguments</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.add</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumDeclaration.addEntry</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/EnumConstantDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GrammarLetterGenerator"><!--Package: com.github.javaparser.generator.core.other; name: com.github.javaparser.generator.core.other.GrammarLetterGenerator; file: com.github.javaparser.generator.core.other.GrammarLetterGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/String;)V"
                       name="main"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.GrammarLetterGenerator.generate</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/util/function/Function">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.GrammarLetterGenerator.generate</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/util/function/Function">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/util/function/Function;)V"
                       name="generate"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/util/function/Function">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.print</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.function.Function.apply</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Boolean.booleanValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.GrammarLetterGenerator.format</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.function.Function.apply</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Boolean.booleanValue</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.GrammarLetterGenerator.format</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.PrintStream.print</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.PrintStream.print</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.print</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Ljava/lang/String;"
                       name="format"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Integer.valueOf</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.format</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BndGenerator"><!--Package: com.github.javaparser.generator.core.other; name: com.github.javaparser.generator.core.other.BndGenerator; file: com.github.javaparser.generator.core.other.BndGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="generate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.utils.Log.info</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="get">sourceRoot</op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.getRoot</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Path.getParent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Path.getParent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Path.getParent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.System.getProperty</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Files.walk</name>
                        <args>
                           <arg type="Ljava/nio/file/Path">?</arg>
                           <arg type="[Ljava/nio/file/FileVisitOption">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.map</name>
                        <args>
                           <arg type="Ljava/util/function/Function">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.distinct</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.sorted</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.reduce</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/util/function/BinaryOperator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Path.resolve</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Files.newBufferedWriter</name>
                        <args>
                           <arg type="Ljava/nio/file/Path">?</arg>
                           <arg type="[Ljava/nio/file/OpenOption">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Path.resolve</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Files.readAllBytes</name>
                        <args>
                           <arg type="Ljava/nio/file/Path">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.nio.charset.StandardCharsets.UTF_8</op>
                     <op code="call">
                        <name>java.lang.String.&lt;init&gt;</name>
                        <args>
                           <arg type="[BLjava/nio/charset/Charset">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.Writer.write</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.Writer.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.Writer.close</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Throwable.addSuppressed</name>
                        <args>
                           <arg type="Ljava/lang/Throwable">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.Log.info</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
                       name="concatPackageName"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/lang/String;"
                       name="getPackageName"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/nio/file/Path">?</arg>
                     <arg type="Ljava/nio/file/Path">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.nio.file.Path.getParent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Path.relativize</name>
                        <args>
                           <arg type="Ljava/nio/file/Path">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Path.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.io.File.separatorChar</op>
                     <op code="call">
                        <name>java.lang.String.replace</name>
                        <args>
                           <arg type="CC">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.github.javaparser.generator.core.node">
         <class id="NodeModifierGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.NodeModifierGenerator; file: com.github.javaparser.generator.core.node.NodeModifierGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setFinal</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setPublic</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AcceptGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.AcceptGenerator; file: com.github.javaparser.generator.core.node.AcceptGenerator-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/github/javaparser/ast/body/MethodDeclaration">genericAccept</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/github/javaparser/ast/body/MethodDeclaration">voidAccept</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.BodyDeclaration.asMethodDeclaration</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">genericAccept</op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.BodyDeclaration.asMethodDeclaration</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">voidAccept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.isAbstract</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="get">genericAccept</op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.AcceptGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="get">voidAccept</op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.AcceptGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GetMetaModelGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.GetMetaModelGenerator; file: com.github.javaparser.generator.core.node.GetMetaModelGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.isRootNode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSimpleName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getMetaModelFieldName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.GetMetaModelGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReplaceMethodGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.ReplaceMethodGenerator; file: com.github.javaparser.generator.core.node.ReplaceMethodGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.ReplaceMethodGenerator.annotateWhenOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getDeclaredPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.ReplaceMethodGenerator.nodeListCheck</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getSetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.ReplaceMethodGenerator.attributeCheck</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getSuperNodeMetaModel</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.ReplaceMethodGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/PropertyMetaModel;Ljava/lang/String;)Ljava/lang/String;"
                       name="attributeCheck"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/PropertyMetaModel;)Ljava/lang/String;"
                       name="nodeListCheck"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RemoveMethodGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.RemoveMethodGenerator; file: com.github.javaparser.generator.core.node.RemoveMethodGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.RemoveMethodGenerator.annotateWhenOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getDeclaredPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.RemoveMethodGenerator.nodeListCheck</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isRequired</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.RemoveMethodGenerator.generateRemoveMethodForAttribute</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.RemoveMethodGenerator.attributeCheck</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getSuperNodeMetaModel</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.RemoveMethodGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/PropertyMetaModel;Ljava/lang/String;)Ljava/lang/String;"
                       name="attributeCheck"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/PropertyMetaModel;)Ljava/lang/String;"
                       name="nodeListCheck"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/metamodel/PropertyMetaModel;)Ljava/lang/String;"
                       name="generateRemoveMethodForAttribute"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.Utils.capitalize</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getSetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameForSetter</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.RemoveMethodGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PropertyGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.PropertyGenerator; file: com.github.javaparser.generator.core.node.PropertyGenerator-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">declaredProperties</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">derivedProperties</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">declaredProperties</op>
                     <op code="call">
                        <name>java.util.HashMap.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">derivedProperties</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getDeclaredPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.generateGetter</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.generateSetter</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getDerivedPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/metamodel/PropertyMetaModel;)V"
                       name="generateSetter"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.findCompilationUnit</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.startsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.Utils.camelCaseToScreaming</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">declaredProperties</op>
                     <op code="call">
                        <name>java.util.Map.put</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.nodeMetaModel</op>
                     <op code="get">commentPropertyMetaModel</op>
                     <op code="get_static">com.github.javaparser.ast.Modifier$Keyword.PUBLIC</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.Modifier.createModifierList</name>
                        <args>
                           <arg type="[Lcom/github/javaparser/ast/Modifier$Keyword">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getContainingNodeMetaModel</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseType</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getSetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/NodeList">?</arg>
                           <arg type="Lcom/github/javaparser/ast/type/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.annotateWhenOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getContainingNodeMetaModel</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.hasWildcard</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseType</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.setType</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/type/Type">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameForSetter</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.addAndGetParameter</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.ast.Modifier$Keyword.FINAL</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.Parameter.addModifier</name>
                        <args>
                           <arg type="[Lcom/github/javaparser/ast/Modifier$Keyword">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isRequired</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNonEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isSingular</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.findCompilationUnit</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="ZZ">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Boolean.TYPE</op>
                     <op code="get_static">java.lang.Integer.TYPE</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.findCompilationUnit</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="ZZ">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.utils.CodeUtils.castValue</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/github/javaparser/ast/type/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getContainingNodeMetaModel</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.hasWildcard</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getContainingNodeMetaModel</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.hasWildcard</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.annotateSuppressWarnings</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/metamodel/PropertyMetaModel;)V"
                       name="generateGetter"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">com.github.javaparser.ast.Modifier$Keyword.PUBLIC</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.Modifier.createModifierList</name>
                        <args>
                           <arg type="[Lcom/github/javaparser/ast/Modifier$Keyword">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameForGetter</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseType</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/NodeList">?</arg>
                           <arg type="Lcom/github/javaparser/ast/type/Type">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.annotateWhenOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.findCompilationUnit</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/body/EnumDeclaration;Lcom/github/javaparser/metamodel/PropertyMetaModel;Z)V"
                       name="generateObservableProperty"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/body/EnumDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.isAssignableFrom</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.startsWith</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.substring</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.Utils.camelCaseToScreaming</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumDeclaration.addEnumConstant</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumConstantDeclaration.addArgument</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumConstantDeclaration.addArgument</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumConstantDeclaration.addArgument</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumConstantDeclaration.addArgument</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="after"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">sourceRoot</op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.tryToParse</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ParseResult.getResult</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.getEnumByName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumDeclaration.getEntries</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">declaredProperties</op>
                     <op code="call">
                        <name>java.util.Map.keySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.LinkedList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.sort</name>
                        <args>
                           <arg type="Ljava/util/Comparator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">declaredProperties</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.generateObservableProperty</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/EnumDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="get">derivedProperties</op>
                     <op code="call">
                        <name>java.util.Map.keySet</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.LinkedList.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/util/Collection">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.sort</name>
                        <args>
                           <arg type="Ljava/util/Comparator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">derivedProperties</op>
                     <op code="call">
                        <name>java.util.Map.get</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.generateObservableProperty</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/EnumDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumDeclaration.addEnumConstant</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.EnumDeclaration.addEnumConstant</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CloneGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.CloneGenerator; file: com.github.javaparser.generator.core.node.CloneGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.CloneGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TypeCastingGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.TypeCastingGenerator; file: com.github.javaparser.generator.core.node.TypeCastingGenerator-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">baseNodes</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.statementMetaModel</op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.expressionMetaModel</op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.typeMetaModel</op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.moduleDirectiveMetaModel</op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.bodyDeclarationMetaModel</op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.commentMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.utils.Utils.set</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="put">baseNodes</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">baseNodes</op>
                     <op code="call">
                        <name>java.util.Set.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.isInstanceOfMetaModel</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.parseNode</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">b</op>
                     <op code="get">a</op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.generateIsType</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.generateAsType</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.generateToType</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.generateIfType</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Ljava/lang/String;)V"
                       name="generateAsType"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="ZZ">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.annotateWhenOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Ljava/lang/String;)V"
                       name="generateToType"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.annotateWhenOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Ljava/lang/String;)V"
                       name="generateIfType"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.annotateWhenOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Ljava/lang/String;)V"
                       name="generateIsType"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseBodyDeclaration</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.annotateWhenOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MainConstructorGenerator"><!--Package: com.github.javaparser.generator.core.node; name: com.github.javaparser.generator.core.node.MainConstructorGenerator; file: com.github.javaparser.generator.core.node.MainConstructorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.is</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ConstructorDeclaration.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ConstructorDeclaration.setPublic</name>
                        <args>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getNameAsString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ConstructorDeclaration.setName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ConstructorDeclaration.addParameter</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ConstructorDeclaration.setJavadocComment</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ConstructorDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getConstructorParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameForSetter</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ConstructorDeclaration.addParameter</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getDeclaredPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.contains</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getSetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseExplicitConstructorInvocationStmt</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.addFirst</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.MainConstructorGenerator.addOrReplaceWhenSameSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.addImport</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.github.javaparser.generator">
         <class id="Generator"><!--Package: com.github.javaparser.generator; name: com.github.javaparser.generator.Generator; file: com.github.javaparser.generator.Generator-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lcom/github/javaparser/utils/SourceRoot">sourceRoot</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">sourceRoot</op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="generate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/Node;)V"
                       name="annotateGenerated"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.getClass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.expr.StringLiteralExpr.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.annotate</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/github/javaparser/ast/expr/Expression">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/Node;)V"
                       name="annotateSuppressWarnings"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.expr.StringLiteralExpr.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.annotate</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/github/javaparser/ast/expr/Expression">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/body/MethodDeclaration;)V"
                       name="annotateOverridden"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.annotate</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                           <arg type="Ljava/lang/Class">?</arg>
                           <arg type="Lcom/github/javaparser/ast/expr/Expression">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/Node;Ljava/lang/Class;Lcom/github/javaparser/ast/expr/Expression;)V"
                       name="annotate"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                     <arg type="Ljava/lang/Class">?</arg>
                     <arg type="Lcom/github/javaparser/ast/expr/Expression">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.getAnnotations</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.stream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.toNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.collect</name>
                        <args>
                           <arg type="Ljava/util/stream/Collector">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.setAnnotations</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/NodeList">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSimpleName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.addSingleMemberAnnotation</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Lcom/github/javaparser/ast/expr/Expression">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSimpleName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.addMarkerAnnotation</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.Node.tryAddImportToParentCompilationUnit</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/body/CallableDeclaration;)V"
                       name="addOrReplaceWhenSameSignature"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.addMethod</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                           <arg type="Ljava/lang/Runnable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/body/CallableDeclaration;)V"
                       name="replaceWhenSameSignature"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.addMethod</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                           <arg type="Ljava/lang/Runnable">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/body/CallableDeclaration;Ljava/lang/Runnable;)V"
                       name="addMethod"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                     <arg type="Ljava/lang/Runnable">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.CallableDeclaration.getSignature</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getCallablesWithSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration$Signature">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Runnable.run</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.CallableDeclaration.getSignature</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getNameAsString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.AssertionError.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.get</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.CallableDeclaration.getJavadocComment</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.CallableDeclaration.getJavadocComment</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.orElse</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.orElse</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.CallableDeclaration.setJavadocComment</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/comments/JavadocComment">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.annotateGenerated</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMembers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.replace</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/body/CallableDeclaration;)V"
                       name="removeMethodWithSameSignature"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.CallableDeclaration.getSignature</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getCallablesWithSignature</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/CallableDeclaration$Signature">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.remove</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/Node">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NodeGenerator"><!--Package: com.github.javaparser.generator; name: com.github.javaparser.generator.NodeGenerator; file: com.github.javaparser.generator.NodeGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="generate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.utils.Log.info</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.JavaParserMetaModel.getNodeMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.parseNode</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                        </args>
                     </op>
                     <op code="get">a</op>
                     <op code="get">b</op>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.generateNode</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.after</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;)Lcom/github/javaparser/utils/Pair;"
                       name="parseNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                  </args>
                  <return>Lcom/github/javaparser/utils/Pair</return>
                  <ops>
                     <op code="get">sourceRoot</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getPackageName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.parse</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.getClassByName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.orElseThrow</name>
                        <args>
                           <arg type="Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.Pair.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;)V"
                       name="annotateWhenOverridden"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getSuperclass</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Class.getMethods</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.stream</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.anyMatch</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.NodeGenerator.annotateOverridden</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="after"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>V</return>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/CompilationUnit;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;)V"
                       name="generateNode"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="VisitorGenerator"><!--Package: com.github.javaparser.generator; name: com.github.javaparser.generator.VisitorGenerator; file: com.github.javaparser.generator.VisitorGenerator-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">pkg</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">visitorClassName</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">returnType</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">argumentType</attribute>
               <attribute final="true" public="false" static="false" type="Z">createMissingVisitMethods</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.Generator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="put">pkg</op>
                     <op code="put">visitorClassName</op>
                     <op code="put">returnType</op>
                     <op code="put">argumentType</op>
                     <op code="put">createMissingVisitMethods</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="generate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.utils.Log.info</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/util/function/Supplier">?</arg>
                        </args>
                     </op>
                     <op code="get">sourceRoot</op>
                     <op code="get">pkg</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">visitorClassName</op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.tryToParse</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ParseResult.getResult</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">visitorClassName</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.getClassByName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">visitorClassName</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.CompilationUnit.getInterfaceByName</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.JavaParserMetaModel.getNodeMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.stream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.after</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="after"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodForNode"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/ClassOrInterfaceDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMethods</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.stream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.findFirst</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.generateVisitMethodBody</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                        </args>
                     </op>
                     <op code="get">createMissingVisitMethods</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.addMethod</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Lcom/github/javaparser/ast/Modifier$Keyword">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.addParameter</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">argumentType</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.addParameter</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get">returnType</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.setType</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.expr.Name.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.expr.MarkerAnnotationExpr.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/expr/Name">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.addAnnotation</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/expr/AnnotationExpr">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.ast.Modifier$Keyword.PUBLIC</op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.addModifier</name>
                        <args>
                           <arg type="[Lcom/github/javaparser/ast/Modifier$Keyword">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.generateVisitMethodBody</name>
                        <args>
                           <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                           <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                           <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.github.javaparser.generator.core.visitor">
         <class id="VoidVisitorWithDefaultsGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.VoidVisitorWithDefaultsGenerator; file: com.github.javaparser.generator.core.visitor.VoidVisitorWithDefaultsGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObjectIdentityEqualsVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.ObjectIdentityEqualsVisitorGenerator; file: com.github.javaparser.generator.core.visitor.ObjectIdentityEqualsVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HashCodeVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.HashCodeVisitorGenerator; file: com.github.javaparser.generator.core.visitor.HashCodeVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Boolean.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Integer.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/stmt/Statement">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="VoidVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.VoidVisitorGenerator; file: com.github.javaparser.generator.core.visitor.VoidVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.setBody</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/stmt/BlockStmt">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GenericVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.GenericVisitorGenerator; file: com.github.javaparser.generator.core.visitor.GenericVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.setBody</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/stmt/BlockStmt">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GenericVisitorAdapterGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.GenericVisitorAdapterGenerator; file: com.github.javaparser.generator.core.visitor.GenericVisitorAdapterGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NoCommentEqualsVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.NoCommentEqualsVisitorGenerator; file: com.github.javaparser.generator.core.visitor.NoCommentEqualsVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.lineCommentMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.blockCommentMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.javadocCommentMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.nodeMetaModel</op>
                     <op code="get">commentPropertyMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModifierVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.ModifierVisitorGenerator; file: com.github.javaparser.generator.core.visitor.ModifierVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.asList</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.stream</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Comparator.comparingInt</name>
                        <args>
                           <arg type="Ljava/util/function/ToIntFunction">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Comparator.reversed</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.sorted</name>
                        <args>
                           <arg type="Ljava/util/Comparator">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Collectors.toList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.collect</name>
                        <args>
                           <arg type="Ljava/util/stream/Collector">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.is</name>
                        <args>
                           <arg type="Ljava/lang/Class">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.hasItems</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/ast/stmt/BlockStmt;Lcom/github/javaparser/metamodel/PropertyMetaModel;)V"
                       name="extracted"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/ast/stmt/BlockStmt">?</arg>
                     <arg type="Lcom/github/javaparser/metamodel/PropertyMetaModel">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNode</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="VoidVisitorAdapterGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator; file: com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CloneVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.CloneVisitorGenerator; file: com.github.javaparser.generator.core.visitor.CloneVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeNameGenerified</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getConstructorParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GenericVisitorWithDefaultsGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.GenericVisitorWithDefaultsGenerator; file: com.github.javaparser.generator.core.visitor.GenericVisitorWithDefaultsGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="EqualsVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.EqualsVisitorGenerator; file: com.github.javaparser.generator.core.visitor.EqualsVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isNodeList</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="GenericListVisitorAdapterGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.GenericListVisitorAdapterGenerator; file: com.github.javaparser.generator.core.visitor.GenericListVisitorAdapterGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.CodeGenerationUtils.f</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Arrays.stream</name>
                        <args>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.filter</name>
                        <args>
                           <arg type="Ljava/util/function/Predicate">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Objects.requireNonNull</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.stream.Stream.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NoCommentHashCodeVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.NoCommentHashCodeVisitorGenerator; file: com.github.javaparser.generator.core.visitor.NoCommentHashCodeVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.lineCommentMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.blockCommentMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.javadocCommentMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.BaseNodeMetaModel.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.isEmpty</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.StringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.metamodel.JavaParserMetaModel.nodeMetaModel</op>
                     <op code="get">commentPropertyMetaModel</op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.List.size</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.isPresent</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.isOptional</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.metamodel.PropertyMetaModel.getType</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Boolean.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.Integer.TYPE</op>
                     <op code="call">
                        <name>java.lang.Object.equals</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.append</name>
                        <args>
                           <arg type="Ljava/lang/CharSequence">?</arg>
                           <arg type="[Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SeparatedItemStringBuilder.toString</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.parseStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ast/stmt/Statement">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObjectIdentityHashCodeVisitorGenerator"><!--Package: com.github.javaparser.generator.core.visitor; name: com.github.javaparser.generator.core.visitor.ObjectIdentityHashCodeVisitorGenerator; file: com.github.javaparser.generator.core.visitor.ObjectIdentityHashCodeVisitorGenerator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.VisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="Z">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/metamodel/BaseNodeMetaModel;Lcom/github/javaparser/ast/body/MethodDeclaration;Lcom/github/javaparser/ast/CompilationUnit;)V"
                       name="generateVisitMethodBody"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Lcom/github/javaparser/metamodel/BaseNodeMetaModel">?</arg>
                     <arg type="Lcom/github/javaparser/ast/body/MethodDeclaration">?</arg>
                     <arg type="Lcom/github/javaparser/ast/CompilationUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getParameters</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.forEach</name>
                        <args>
                           <arg type="Ljava/util/function/Consumer">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.body.MethodDeclaration.getBody</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Optional.get</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.getStatements</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.NodeList.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.ast.stmt.BlockStmt.addStatement</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="com.github.javaparser.generator.core">
         <class id="CoreGenerator"><!--Package: com.github.javaparser.generator.core; name: com.github.javaparser.generator.core.CoreGenerator; file: com.github.javaparser.generator.core.CoreGenerator-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lcom/github/javaparser/ParserConfiguration">parserConfiguration</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/String;)V"
                       name="main"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.RuntimeException.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.Log$StandardOutStandardErrorAdapter.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.Log.setAdapter</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/Log$Adapter">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Paths.get</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.generator.core.CoreGenerator.parserConfiguration</op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/nio/file/Path">?</arg>
                           <arg type="Lcom/github/javaparser/ParserConfiguration">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.generator.core.CoreGenerator.parserConfiguration</op>
                     <op code="call">
                        <name>com.github.javaparser.StaticJavaParser.setConfiguration</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ParserConfiguration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.nio.file.Paths.get</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                           <arg type="[Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.generator.core.CoreGenerator.parserConfiguration</op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.&lt;init&gt;</name>
                        <args>
                           <arg type="Ljava/nio/file/Path">?</arg>
                           <arg type="Lcom/github/javaparser/ParserConfiguration">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.CoreGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.CoreGenerator.run</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.utils.SourceRoot.saveAll</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lcom/github/javaparser/utils/SourceRoot;Lcom/github/javaparser/utils/SourceRoot;)V"
                       name="run"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                     <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.TypeCastingGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.GenericListVisitorAdapterGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.GenericListVisitorAdapterGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.GenericVisitorAdapterGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.GenericVisitorAdapterGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.GenericVisitorWithDefaultsGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.GenericVisitorWithDefaultsGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.EqualsVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.EqualsVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.ObjectIdentityEqualsVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.ObjectIdentityEqualsVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.NoCommentEqualsVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.NoCommentEqualsVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.VoidVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.VoidVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.VoidVisitorWithDefaultsGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.VoidVisitorWithDefaultsGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.GenericVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.GenericVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.HashCodeVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.HashCodeVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.ObjectIdentityHashCodeVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.ObjectIdentityHashCodeVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.NoCommentHashCodeVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.NoCommentHashCodeVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.CloneVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.CloneVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.ModifierVisitorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.visitor.ModifierVisitorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.PropertyGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.RemoveMethodGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.RemoveMethodGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.ReplaceMethodGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.ReplaceMethodGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.CloneGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.CloneGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.GetMetaModelGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.GetMetaModelGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.MainConstructorGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.MainConstructorGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.NodeModifierGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.NodeModifierGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.AcceptGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.node.AcceptGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.TokenKindGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.TokenKindGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.BndGenerator.&lt;init&gt;</name>
                        <args>
                           <arg type="Lcom/github/javaparser/utils/SourceRoot">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>com.github.javaparser.generator.core.other.BndGenerator.generate</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>com.github.javaparser.ParserConfiguration.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get_static">com.github.javaparser.ParserConfiguration$LanguageLevel.RAW</op>
                     <op code="call">
                        <name>com.github.javaparser.ParserConfiguration.setLanguageLevel</name>
                        <args>
                           <arg type="Lcom/github/javaparser/ParserConfiguration$LanguageLevel">?</arg>
                        </args>
                     </op>
                     <op code="put_static">com.github.javaparser.generator.core.CoreGenerator.parserConfiguration</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
   </app>
</skeleton>
